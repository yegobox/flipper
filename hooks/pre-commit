#!/bin/bash
# Define a lock file to prevent concurrent runs
LOCKFILE=/tmp/pre-commit.lock

# Function to clean up the lock file on exit
cleanup() {
  rm -f "$LOCKFILE"
}
trap cleanup EXIT

# Check if a rebase is in progress
if [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; then
  echo "Rebase in progress, skipping version increment..."
  exit 0
fi

# Check if the lock file exists
if [ -f "$LOCKFILE" ]; then
  echo "Script is already running. Exiting..."
  exit 1
fi

# Create the lock file
touch "$LOCKFILE"

# Configuration: Add folders to exclude (space-separated list)
EXCLUDE_FOLDERS=("node_modules" "build" "test" "packages" "open-sources")

# Build find exclusion pattern
EXCLUDE_PATTERN=""
for folder in "${EXCLUDE_FOLDERS[@]}"; do
  EXCLUDE_PATTERN+=" ! -path \"*/$folder/*\""
done

# Detect correct sed syntax depending on OS
OS=$(uname)
if [[ "$OS" == "Darwin" ]]; then
  SED_CMD="sed -i ''"
else
  SED_CMD="sed -i"
fi

# Find all pubspec.yaml files excluding specified folders
eval "find . -type f -name \"pubspec.yaml\" $EXCLUDE_PATTERN" | while read -r PUBSPEC_PATH; do
  # Extract directory path
  APP_DIR=$(dirname "$PUBSPEC_PATH")
  
  # Navigate to app directory
  cd "$APP_DIR" || continue
  
  # Process version increment
  echo "Processing $APP_DIR/pubspec.yaml"
  
  # Get current version
  version_line=$(grep "^version: " pubspec.yaml)
  if [[ -z "$version_line" ]]; then
    echo "No version field found in $APP_DIR/pubspec.yaml"
    cd - > /dev/null
    continue
  fi

  version=$(echo "$version_line" | awk '{print $2}')

  # Split into base and build metadata
  if [[ "$version" =~ ^([0-9]+\.[0-9]+\.[0-9]+)(\+([0-9]+))?$ ]]; then
    base_version="${BASH_REMATCH[1]}"
    build_number="${BASH_REMATCH[3]}"
    
    if [[ -z "$build_number" ]]; then
      build_number=1
    else
      build_number=$((build_number + 1))
    fi
    
    new_version="$base_version+$build_number"
  else
    echo "Invalid version format in $APP_DIR/pubspec.yaml: $version"
    cd - > /dev/null
    continue
  fi

  # Update pubspec.yaml
  $SED_CMD "s|$version_line|version: $new_version|" pubspec.yaml
  git add pubspec.yaml

  # Handle MSIX version
  msix_version=$(awk '/msix_version:/ {print $2}' pubspec.yaml)
  if [[ -n "$msix_version" ]]; then
    if [[ "$msix_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
      major="${BASH_REMATCH[1]}"
      minor="${BASH_REMATCH[2]}"
      build="${BASH_REMATCH[3]}"
      revision="${BASH_REMATCH[4]}"

      revision=$((revision + 1))
      new_msix_version="$major.$minor.$build.$revision"

      $SED_CMD "s/msix_version: $msix_version/msix_version: $new_msix_version/" pubspec.yaml
      if [[ "$msix_version" != "$new_msix_version" ]]; then
        git add pubspec.yaml
        git commit -m "Increment MSIX version to $new_msix_version"
      fi
    else
      echo "Invalid msix_version format in $APP_DIR/pubspec.yaml: $msix_version"
    fi
  fi
  
  # Return to original directory
  cd - > /dev/null
done

exit 0
