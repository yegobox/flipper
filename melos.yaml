name: flipper
repository: https://github.com/yegobox/flipper
packages:
  - open-sources/**
  - open-sources/**/**
  - packages/**
  - packages/**/**
  - apps/**
  - apps/**/*

ignore:
  - "*web*"
  - "*odm*"
command:
  version:
    linkToCommits: true
    branch: dev
    workspaceChangelog: true

scripts:
  get_deps:
    run: melos exec -- flutter pub deps
    description: List sub dependencies
  flipper:
    run: melos exec --scope="*flipper_data_table*" -- flutter packages pub publish -f
  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks.
  test:selective_unit_test:
    exec: flutter test --dart-define=FLUTTER_TEST_ENV=true
    dir-exists: "test"
    fail-fast: true
    description: Run selective unit tests

  test:all_unit_tests:
    exec: flutter test
    no-select: true
    description: Run all unit testsAdditionally, you can incorporate commands for analysis and code coverage. Melos offers a GUI interface for seamless execution without terminal input.
  unit_test:
    run: |
      # dart run realm install
      melos exec --dir-exists="test" --fail-fast -- flutter test --dart-define=FLUTTER_TEST_ENV=true  --no-pub --coverage
    description: Run all Flutter tests in this project.
  unit_test_and_coverage:
    description: Merge all packages coverage tracefiles and filter out generated files with correct paths.
    run: |
      melos exec rm -rf coverage
      melos run unit_test
      melos exec -c 1 --file-exists=coverage/lcov.info -- coverde  filter --input ./coverage/lcov.info --output MELOS_ROOT_PATH/coverage/filtered.lcov.info --filters \.g\.dart --paths-parent MELOS_PACKAGE_PATH --mode a
      coverde value -i coverage/filtered.lcov.info > MELOS_ROOT_PATH/coverage/result.txt
      genhtml -o MELOS_ROOT_PATH/coverage/html MELOS_ROOT_PATH/coverage/filtered.lcov.info 
  analyze:
    run: |
      melos exec -c 5 -- \
        dart analyze . --fatal-infos
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  firebase:emulator:
    run: |
      cd .github/workflows/scripts && ./start-firebase-emulator.sh
    description: |
      Start the Firebase emulator suite. Used by Functions, Firestore, Auth and Storage
      integration testing.
       - Requires Node.js and NPM installed.

  format:
    run: dart pub global run flutter_plugin_tools format
    description: |
      Build a specific example app for Android.
       - Requires `flutter_plugin_tools` (`pub global activate flutter_plugin_tools`).
       - Requires `clang-format` (can be installed via Brew on macOS).

  build:all:
    run: |
      melos run build:example_ios_pub --no-select && \
      melos run build:example_android_pub --no-select && \
      melos run build:example_macos --no-select && \
      melos bootstrap
    description: Build all example apps.

  build:example_android:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk --no-pub"
    description: Build a specific example app for Android.
    select-package:
      dir-exists:
        - android
      scope: "*example*"

  build:example_android_pub:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk"
    description: Build a specific example app for Android.
    select-package:
      dir-exists:
        - android
      scope: "*example*"

  build:example_ios:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build ios --no-codesign --no-pub"
    description: Build a specific example app for iOS.
    select-package:
      dir-exists:
        - ios
      scope: "*example*"

  build:example_ios_pub:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build ios --no-codesign"
    description: Build a specific example app for iOS.
    select-package:
      dir-exists:
        - ios
      scope: "*example*"

  build:example_macos:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build macos --no-pub"
    description: |
      Build a specific example app for macOS.
    select-package:
      dir-exists:
        - macos
      scope: "*example*"

  test:all:
    run: |
      melos run test --no-select && \
      melos run test:web --no-select && \
      melos run test:e2e --no-select
    description: |
      Run all tests available.

  test:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --no-pub"
    description: Run `flutter test` for a specific package.
    select-package:
      dir-exists:
        - test
      ignore:
        - "*web*"
        - "*odm*"
        - "*example*"

  test:web:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter test --no-pub --platform=chrome"
    description: Run `flutter test --platform=chrome` for a specific '*web' package.
    select-package:
      dir-exists:
        - test
      scope: "*web*"

  test:e2e:
    run: |
      melos exec -c 1 --fail-fast -- \
        "flutter drive --no-pub --target=./test_driver/driver_e2e.dart"
    description: |
      Run all e2e tests.
    select-package:
      dir-exists:
        - test_driver
      scope: "*tests*"

  clean:deep:
    run: git clean -x -d -f -q
    description: Clean things very deeply, can be used to establish "pristine checkout" status.

  qualitycheck:
    run: |
      melos run clean:deep && \
      melos clean && \
      melos bootstrap && \
      melos run lint:all && \
      melos run build:all && \
      melos run test:all
    description: Run all targets generally expected in CI for a full local quality check.

  odm:test:
    run: |
      melos run odm:test:dart &&
      melos run odm:test:flutter
    description: Run all tests for the ODM.

  odm:test:dart:
    run: |
      melos exec -- \
        "dart test"
    description: Run Dart tests for the ODM.
    select-package:
      dir-exists: "test"
      depends-on: "test"
      scope: "*odm*"

  odm:test:flutter:
    run: |
      melos exec -- \
        "flutter test"
    description: Run Flutter tests for the ODM.
    select-package:
      dir-exists: "test"
      no-depends-on: "test"
      scope: "*odm*"

  odm:example_build_runner:build:
    run: |
      melos exec -- \
        "flutter pub run build_runner build --delete-conflicting-outputs"
    description: Run a build_runner build in the ODM example app.
    select-package:
      scope: "*odm_example*"

  odm:generator_test_build_runner:build:
    run: |
      melos exec -c 1 -- \
        "dart pub get && flutter pub run build_runner build --delete-conflicting-outputs"
    description: Run a build_runner build generator test.
    select-package:
      scope:
        - "*odm_generator_integration*"

  odm:example_build_runner:watch:
    run: |
      melos exec -c 5 -- \
        "flutter pub run build_runner watch --delete-conflicting-outputs"
    description: Run build_runner watch in the ODM example app.
    select-package:
      scope: "*odm_example*"
  upgrade_dependencies:
    run: |
      melos exec -c 6 -- \
        "flutter pub upgrade"

  description: Upgrade all dependencies.

  # Additional cleanup lifecycle script, executed when `melos clean` is run.
  postclean: >
    melos exec -c 6 -- "flutter clean"
