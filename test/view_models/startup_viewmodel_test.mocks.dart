// Mocks generated by Mockito 5.0.6 from annotations
// in flipper/test/view_models/startup_viewmodel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flipper_models/models/branch.dart' as _i8;
import 'package:flipper_models/models/business.dart' as _i7;
import 'package:flipper_models/models/category.dart' as _i11;
import 'package:flipper_models/models/color.dart' as _i10;
import 'package:flipper_models/models/login.dart' as _i2;
import 'package:flipper_models/models/product.dart' as _i4;
import 'package:flipper_models/models/stock.dart' as _i9;
import 'package:flipper_models/models/sync.dart' as _i3;
import 'package:flipper_models/models/unit.dart' as _i12;
import 'package:flipper_models/models/variant_stock.dart' as _i13;
import 'package:flipper_services/abstractions/api.dart' as _i5;
import 'package:flipper_services/abstractions/storage.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeLogin extends _i1.Fake implements _i2.Login {}

class _FakeSync extends _i1.Fake implements _i3.Sync {}

class _FakeProduct extends _i1.Fake implements _i4.Product {}

/// A class which mocks [Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockApi<T> extends _i1.Mock implements _i5.Api<T> {
  MockApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Login> login({String? phone}) =>
      (super.noSuchMethod(Invocation.method(#login, [], {#phone: phone}),
              returnValue: Future<_i2.Login>.value(_FakeLogin()))
          as _i6.Future<_i2.Login>);
  @override
  _i6.Future<List<_i4.Product>> products() =>
      (super.noSuchMethod(Invocation.method(#products, []),
              returnValue: Future<List<_i4.Product>>.value(<_i4.Product>[]))
          as _i6.Future<List<_i4.Product>>);
  @override
  _i6.Future<int> signup({Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(Invocation.method(#signup, [], {#business: business}),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<_i3.Sync> authenticateWithOfflineDb({String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticateWithOfflineDb, [], {#userId: userId}),
          returnValue:
              Future<_i3.Sync>.value(_FakeSync())) as _i6.Future<_i3.Sync>);
  @override
  _i6.Future<List<_i7.Business>> businesses() =>
      (super.noSuchMethod(Invocation.method(#businesses, []),
              returnValue: Future<List<_i7.Business>>.value(<_i7.Business>[]))
          as _i6.Future<List<_i7.Business>>);
  @override
  _i6.Future<List<_i8.Branch>> branches({String? businessId}) =>
      (super.noSuchMethod(
              Invocation.method(#branches, [], {#businessId: businessId}),
              returnValue: Future<List<_i8.Branch>>.value(<_i8.Branch>[]))
          as _i6.Future<List<_i8.Branch>>);
  @override
  _i6.Future<List<_i9.Stock>> stocks({String? productId}) => (super
          .noSuchMethod(Invocation.method(#stocks, [], {#productId: productId}),
              returnValue: Future<List<_i9.Stock>>.value(<_i9.Stock>[]))
      as _i6.Future<List<_i9.Stock>>);
  @override
  _i6.Future<List<_i10.PColor>> colors({String? branchId}) =>
      (super.noSuchMethod(Invocation.method(#colors, [], {#branchId: branchId}),
              returnValue: Future<List<_i10.PColor>>.value(<_i10.PColor>[]))
          as _i6.Future<List<_i10.PColor>>);
  @override
  _i6.Future<List<_i11.Category>> categories({String? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#categories, [], {#branchId: branchId}),
              returnValue: Future<List<_i11.Category>>.value(<_i11.Category>[]))
          as _i6.Future<List<_i11.Category>>);
  @override
  _i6.Future<List<_i12.Unit>> units({String? branchId}) =>
      (super.noSuchMethod(Invocation.method(#units, [], {#branchId: branchId}),
              returnValue: Future<List<_i12.Unit>>.value(<_i12.Unit>[]))
          as _i6.Future<List<_i12.Unit>>);
  @override
  _i6.Future<int> create<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<int> update<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<bool> delete({String? id, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {#id: id, #endPoint: endPoint}),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<List<_i13.VariantStock>> variantStock(
          {String? branchId, String? variantId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #variantStock, [], {#branchId: branchId, #variantId: variantId}),
          returnValue: Future<List<_i13.VariantStock>>.value(
              <_i13.VariantStock>[])) as _i6.Future<List<_i13.VariantStock>>);
  @override
  _i6.Future<List<_i13.VariantStock>> variantProduct(
          {String? branchId, String? productId}) =>
      (super.noSuchMethod(
              Invocation.method(#variantProduct, [],
                  {#branchId: branchId, #productId: productId}),
              returnValue:
                  Future<List<_i13.VariantStock>>.value(<_i13.VariantStock>[]))
          as _i6.Future<List<_i13.VariantStock>>);
  @override
  _i6.Future<int> addUnits({Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(Invocation.method(#addUnits, [], {#data: data}),
          returnValue: Future<int>.value(0)) as _i6.Future<int>);
  @override
  _i6.Future<_i4.Product> createProduct({_i4.Product? product}) =>
      (super.noSuchMethod(
              Invocation.method(#createProduct, [], {#product: product}),
              returnValue: Future<_i4.Product>.value(_FakeProduct()))
          as _i6.Future<_i4.Product>);
  @override
  _i6.Future<List<_i4.Product>> isTempProductExist() =>
      (super.noSuchMethod(Invocation.method(#isTempProductExist, []),
              returnValue: Future<List<_i4.Product>>.value(<_i4.Product>[]))
          as _i6.Future<List<_i4.Product>>);
  @override
  _i6.Future<bool> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i14.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic read({String? key}) =>
      super.noSuchMethod(Invocation.method(#read, [], {#key: key}));
  @override
  dynamic remove({String? key}) =>
      super.noSuchMethod(Invocation.method(#remove, [], {#key: key}));
  @override
  bool write({String? key, String? value}) => (super.noSuchMethod(
      Invocation.method(#write, [], {#key: key, #value: value}),
      returnValue: false) as bool);
}
