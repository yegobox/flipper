// Mocks generated by Mockito 5.0.17 from annotations
// in flipper_rw/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i3;

import 'package:firebase_core/firebase_core.dart' as _i4;
import 'package:firebase_messaging/firebase_messaging.dart' as _i13;
import 'package:firebase_messaging_platform_interface/firebase_messaging_platform_interface.dart'
    as _i5;
import 'package:flipper_models/models/models.dart' as _i2;
import 'package:flipper_rw/stack.dart' as _i7;
import 'package:flipper_services/abstractions/api.dart' as _i9;
import 'package:flipper_services/abstractions/location.dart' as _i20;
import 'package:flipper_services/abstractions/remote.dart' as _i12;
import 'package:flipper_services/abstractions/storage.dart' as _i18;
import 'package:flipper_services/app_service.dart' as _i19;
import 'package:flipper_services/billing_service.dart' as _i21;
import 'package:flipper_services/keypad_service.dart' as _i15;
import 'package:flipper_services/language_service.dart' as _i11;
import 'package:flipper_services/product_service.dart' as _i14;
import 'package:flipper_services/setting_service.dart' as _i16;
import 'package:flutter/material.dart' as _i17;
import 'package:logger/src/logger.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked/stacked.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSyncF_0 extends _i1.Fake implements _i2.SyncF {}

class _FakeStockSync_1 extends _i1.Fake implements _i2.StockSync {}

class _FakeProductSync_2 extends _i1.Fake implements _i2.ProductSync {}

class _FakeOrderFSync_3 extends _i1.Fake implements _i2.OrderFSync {}

class _FakeSpenn_4 extends _i1.Fake implements _i2.Spenn {}

class _FakeBusiness_5 extends _i1.Fake implements _i2.Business {}

class _FakePoints_6 extends _i1.Fake implements _i2.Points {}

class _FakeSubscription_7 extends _i1.Fake implements _i2.Subscription {}

class _FakeLocale_8 extends _i1.Fake implements _i3.Locale {}

class _FakeFirebaseApp_9 extends _i1.Fake implements _i4.FirebaseApp {}

class _FakeNotificationSettings_10 extends _i1.Fake
    implements _i5.NotificationSettings {}

class _FakeLogger_11 extends _i1.Fake implements _i6.Logger {}

class _FakeStack_12<T> extends _i1.Fake implements _i7.Stack<T> {}

class _FakeReactiveValue_13<T> extends _i1.Fake
    implements _i8.ReactiveValue<T> {}

/// A class which mocks [Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockApi<T> extends _i1.Mock implements _i9.Api<T> {
  @override
  _i10.Future<List<_i2.ProductSync>> products({int? branchId}) => (super
          .noSuchMethod(Invocation.method(#products, [], {#branchId: branchId}),
              returnValue:
                  Future<List<_i2.ProductSync>>.value(<_i2.ProductSync>[]))
      as _i10.Future<List<_i2.ProductSync>>);
  @override
  _i10.Future<int> signup({Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(Invocation.method(#signup, [], {#business: business}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i2.SyncF> login({String? userPhone}) => (super.noSuchMethod(
          Invocation.method(#login, [], {#userPhone: userPhone}),
          returnValue: Future<_i2.SyncF>.value(_FakeSyncF_0()))
      as _i10.Future<_i2.SyncF>);
  @override
  _i10.Future<List<_i2.Business>> getOnlineBusiness({String? userId}) =>
      (super.noSuchMethod(
              Invocation.method(#getOnlineBusiness, [], {#userId: userId}),
              returnValue: Future<List<_i2.Business>>.value(<_i2.Business>[]))
          as _i10.Future<List<_i2.Business>>);
  @override
  _i10.Future<List<_i2.Business>> getLocalOrOnlineBusiness({String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#getLocalOrOnlineBusiness, [], {#userId: userId}),
          returnValue:
              Future<List<_i2.Business>>.value(<_i2.Business>[])) as _i10
          .Future<List<_i2.Business>>);
  @override
  _i10.Future<List<_i2.BranchSync>> branches({int? businessId}) => (super
      .noSuchMethod(Invocation.method(#branches, [], {#businessId: businessId}),
          returnValue:
              Future<List<_i2.BranchSync>>.value(<_i2.BranchSync>[])) as _i10
      .Future<List<_i2.BranchSync>>);
  @override
  _i10.Future<List<_i2.BranchSync>> getLocalBranches({int? businessId}) =>
      (super.noSuchMethod(
          Invocation.method(#getLocalBranches, [], {#businessId: businessId}),
          returnValue:
              Future<List<_i2.BranchSync>>.value(<_i2.BranchSync>[])) as _i10
          .Future<List<_i2.BranchSync>>);
  @override
  List<_i2.StockSync> stocks({int? productId}) => (super.noSuchMethod(
      Invocation.method(#stocks, [], {#productId: productId}),
      returnValue: <_i2.StockSync>[]) as List<_i2.StockSync>);
  @override
  _i10.Stream<_i2.StockSync> stockByVariantIdStream({int? variantId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #stockByVariantIdStream, [], {#variantId: variantId}),
              returnValue: Stream<_i2.StockSync>.empty())
          as _i10.Stream<_i2.StockSync>);
  @override
  _i10.Stream<List<_i2.ProductSync>> productStreams({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#productStreams, [], {#branchId: branchId}),
              returnValue: Stream<List<_i2.ProductSync>>.empty())
          as _i10.Stream<List<_i2.ProductSync>>);
  @override
  _i10.Future<_i2.StockSync> stockByVariantId({int? variantId}) =>
      (super.noSuchMethod(
              Invocation.method(#stockByVariantId, [], {#variantId: variantId}),
              returnValue: Future<_i2.StockSync>.value(_FakeStockSync_1()))
          as _i10.Future<_i2.StockSync>);
  @override
  _i10.Future<List<_i2.PColor>> colors({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#colors, [], {#branchId: branchId}),
              returnValue: Future<List<_i2.PColor>>.value(<_i2.PColor>[]))
          as _i10.Future<List<_i2.PColor>>);
  @override
  _i10.Future<List<_i2.Category>> categories({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#categories, [], {#branchId: branchId}),
              returnValue: Future<List<_i2.Category>>.value(<_i2.Category>[]))
          as _i10.Future<List<_i2.Category>>);
  @override
  _i10.Future<List<_i2.Unit>> units({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#units, [], {#branchId: branchId}),
              returnValue: Future<List<_i2.Unit>>.value(<_i2.Unit>[]))
          as _i10.Future<List<_i2.Unit>>);
  @override
  _i10.Future<int> create<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<int> update<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<bool> delete({dynamic id, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {#id: id, #endPoint: endPoint}),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<_i2.PColor?> getColor({int? id, String? endPoint}) =>
      (super.noSuchMethod(
              Invocation.method(#getColor, [], {#id: id, #endPoint: endPoint}),
              returnValue: Future<_i2.PColor?>.value())
          as _i10.Future<_i2.PColor?>);
  @override
  _i10.Future<_i2.StockSync?> getStock({int? branchId, int? variantId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getStock, [], {#branchId: branchId, #variantId: variantId}),
              returnValue: Future<_i2.StockSync?>.value())
          as _i10.Future<_i2.StockSync?>);
  @override
  _i10.Future<List<_i2.VariantSync>> variants(
          {int? branchId, int? productId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #variants, [], {#branchId: branchId, #productId: productId}),
              returnValue:
                  Future<List<_i2.VariantSync>>.value(<_i2.VariantSync>[]))
          as _i10.Future<List<_i2.VariantSync>>);
  @override
  _i10.Future<_i2.VariantSync?> variant({int? variantId}) =>
      (super.noSuchMethod(
              Invocation.method(#variant, [], {#variantId: variantId}),
              returnValue: Future<_i2.VariantSync?>.value())
          as _i10.Future<_i2.VariantSync?>);
  @override
  _i10.Future<int> addUnits({Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(Invocation.method(#addUnits, [], {#data: data}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<int> addVariant(
          {List<_i2.VariantSync>? data,
          double? retailPrice,
          double? supplyPrice}) =>
      (super.noSuchMethod(
          Invocation.method(#addVariant, [], {
            #data: data,
            #retailPrice: retailPrice,
            #supplyPrice: supplyPrice
          }),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i2.ProductSync?> getProduct({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [], {#id: id}),
              returnValue: Future<_i2.ProductSync?>.value())
          as _i10.Future<_i2.ProductSync?>);
  @override
  _i10.Future<_i2.ProductSync?> getProductByBarCode({String? barCode}) =>
      (super.noSuchMethod(
              Invocation.method(#getProductByBarCode, [], {#barCode: barCode}),
              returnValue: Future<_i2.ProductSync?>.value())
          as _i10.Future<_i2.ProductSync?>);
  @override
  _i10.Future<_i2.ProductSync> createProduct({_i2.ProductSync? product}) =>
      (super.noSuchMethod(
              Invocation.method(#createProduct, [], {#product: product}),
              returnValue: Future<_i2.ProductSync>.value(_FakeProductSync_2()))
          as _i10.Future<_i2.ProductSync>);
  @override
  _i10.Future<List<_i2.ProductSync>> isTempProductExist({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#isTempProductExist, [], {#branchId: branchId}),
              returnValue:
                  Future<List<_i2.ProductSync>>.value(<_i2.ProductSync>[]))
          as _i10.Future<List<_i2.ProductSync>>);
  @override
  _i10.Future<bool> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<_i2.Voucher?> consumeVoucher({int? voucherCode}) =>
      (super.noSuchMethod(
          Invocation.method(#consumeVoucher, [], {#voucherCode: voucherCode}),
          returnValue:
              Future<_i2.Voucher?>.value()) as _i10.Future<_i2.Voucher?>);
  @override
  _i10.Future<_i2.OrderFSync> createOrder(
          {double? customAmount,
          _i2.VariantSync? variation,
          double? price,
          bool? useProductName = false,
          String? orderType = r'custom',
          double? quantity = 1.0}) =>
      (super.noSuchMethod(
              Invocation.method(#createOrder, [], {
                #customAmount: customAmount,
                #variation: variation,
                #price: price,
                #useProductName: useProductName,
                #orderType: orderType,
                #quantity: quantity
              }),
              returnValue: Future<_i2.OrderFSync>.value(_FakeOrderFSync_3()))
          as _i10.Future<_i2.OrderFSync>);
  @override
  _i10.Future<List<_i2.OrderFSync>> orders({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#orders, [], {#branchId: branchId}),
              returnValue:
                  Future<List<_i2.OrderFSync>>.value(<_i2.OrderFSync>[]))
          as _i10.Future<List<_i2.OrderFSync>>);
  @override
  _i10.Future<_i2.OrderFSync?> order({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#order, [], {#branchId: branchId}),
              returnValue: Future<_i2.OrderFSync?>.value())
          as _i10.Future<_i2.OrderFSync?>);
  @override
  _i10.Future<_i2.OrderItemSync?> getOrderItem({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderItem, [], {#id: id}),
              returnValue: Future<_i2.OrderItemSync?>.value())
          as _i10.Future<_i2.OrderItemSync?>);
  @override
  _i10.Future<_i2.VariantSync?> getCustomProductVariant() =>
      (super.noSuchMethod(Invocation.method(#getCustomProductVariant, []),
              returnValue: Future<_i2.VariantSync?>.value())
          as _i10.Future<_i2.VariantSync?>);
  @override
  _i10.Future<_i2.Spenn> spennPayment({double? amount, dynamic phoneNumber}) =>
      (super.noSuchMethod(
              Invocation.method(#spennPayment, [],
                  {#amount: amount, #phoneNumber: phoneNumber}),
              returnValue: Future<_i2.Spenn>.value(_FakeSpenn_4()))
          as _i10.Future<_i2.Spenn>);
  @override
  _i10.Future<void> collectCashPayment(
          {double? cashReceived, _i2.OrderFSync? order}) =>
      (super.noSuchMethod(
              Invocation.method(#collectCashPayment, [],
                  {#cashReceived: cashReceived, #order: order}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i2.Setting? getSetting({int? userId}) =>
      (super.noSuchMethod(Invocation.method(#getSetting, [], {#userId: userId}))
          as _i2.Setting?);
  @override
  _i10.Future<_i2.Setting?> createSetting({_i2.Setting? setting}) =>
      (super.noSuchMethod(
              Invocation.method(#createSetting, [], {#setting: setting}),
              returnValue: Future<_i2.Setting?>.value())
          as _i10.Future<_i2.Setting?>);
  @override
  void sendMessage({int? receiverId, _i2.Message? message}) =>
      super.noSuchMethod(
          Invocation.method(
              #sendMessage, [], {#receiverId: receiverId, #message: message}),
          returnValueForMissingStub: null);
  @override
  _i10.Stream<List<_i2.Message>> messages({int? conversationId}) => (super
      .noSuchMethod(
          Invocation.method(#messages, [], {#conversationId: conversationId}),
          returnValue: Stream<List<_i2.Message>>.empty()) as _i10
      .Stream<List<_i2.Message>>);
  @override
  _i10.Stream<List<_i2.Business>> users() =>
      (super.noSuchMethod(Invocation.method(#users, []),
              returnValue: Stream<List<_i2.Business>>.empty())
          as _i10.Stream<List<_i2.Business>>);
  @override
  _i10.Stream<List<_i2.Business>> contacts() =>
      (super.noSuchMethod(Invocation.method(#contacts, []),
              returnValue: Stream<List<_i2.Business>>.empty())
          as _i10.Stream<List<_i2.Business>>);
  @override
  _i10.Future<List<_i2.Business>> getContacts() =>
      (super.noSuchMethod(Invocation.method(#getContacts, []),
              returnValue: Future<List<_i2.Business>>.value(<_i2.Business>[]))
          as _i10.Future<List<_i2.Business>>);
  @override
  _i2.Business getBusiness() =>
      (super.noSuchMethod(Invocation.method(#getBusiness, []),
          returnValue: _FakeBusiness_5()) as _i2.Business);
  @override
  _i2.CustomerSync? addCustomer(
          {Map<dynamic, dynamic>? customer, int? orderId}) =>
      (super.noSuchMethod(Invocation.method(
              #addCustomer, [], {#customer: customer, #orderId: orderId}))
          as _i2.CustomerSync?);
  @override
  _i10.Future<dynamic> assingOrderToCustomer({int? customerId, int? orderId}) =>
      (super.noSuchMethod(
          Invocation.method(#assingOrderToCustomer, [],
              {#customerId: customerId, #orderId: orderId}),
          returnValue: Future<dynamic>.value()) as _i10.Future<dynamic>);
  @override
  _i10.Stream<_i2.CustomerSync?> getCustomer({String? key}) =>
      (super.noSuchMethod(Invocation.method(#getCustomer, [], {#key: key}),
              returnValue: Stream<_i2.CustomerSync?>.empty())
          as _i10.Stream<_i2.CustomerSync?>);
  @override
  _i10.Stream<_i2.CustomerSync?> getCustomerByOrderId({int? id}) => (super
          .noSuchMethod(Invocation.method(#getCustomerByOrderId, [], {#id: id}),
              returnValue: Stream<_i2.CustomerSync?>.empty())
      as _i10.Stream<_i2.CustomerSync?>);
  @override
  _i10.Future<_i2.OrderFSync> getOrderById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderById, [], {#id: id}),
              returnValue: Future<_i2.OrderFSync>.value(_FakeOrderFSync_3()))
          as _i10.Future<_i2.OrderFSync>);
  @override
  _i10.Future<List<_i2.OrderFSync>> tickets() => (super.noSuchMethod(
          Invocation.method(#tickets, []),
          returnValue: Future<List<_i2.OrderFSync>>.value(<_i2.OrderFSync>[]))
      as _i10.Future<List<_i2.OrderFSync>>);
  @override
  List<_i2.VariantSync> getVariantByProductId({int? productId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getVariantByProductId, [], {#productId: productId}),
          returnValue: <_i2.VariantSync>[]) as List<_i2.VariantSync>);
  @override
  _i10.Future<List<_i2.OrderFSync>> getOrderByStatus({String? status}) => (super
      .noSuchMethod(Invocation.method(#getOrderByStatus, [], {#status: status}),
          returnValue:
              Future<List<_i2.OrderFSync>>.value(<_i2.OrderFSync>[])) as _i10
      .Future<List<_i2.OrderFSync>>);
  @override
  _i10.Future<int> sendReport({List<_i2.OrderItemSync>? orderItems}) =>
      (super.noSuchMethod(
          Invocation.method(#sendReport, [], {#orderItems: orderItems}),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<void> createGoogleSheetDoc({String? email}) => (super
          .noSuchMethod(
              Invocation.method(#createGoogleSheetDoc, [], {#email: email}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
      as _i10.Future<void>);
  @override
  _i2.Business getBusinessById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getBusinessById, [], {#id: id}),
          returnValue: _FakeBusiness_5()) as _i2.Business);
  @override
  _i2.OrderItemSync? getOrderItemByVariantId({int? variantId, int? orderId}) =>
      (super.noSuchMethod(Invocation.method(#getOrderItemByVariantId, [],
          {#variantId: variantId, #orderId: orderId})) as _i2.OrderItemSync?);
  @override
  _i10.Future<void> updateBusiness(
          {int? id, Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateBusiness, [], {#id: id, #business: business}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  int lifeTimeCustomersForbranch({int? branchId}) => (super.noSuchMethod(
      Invocation.method(#lifeTimeCustomersForbranch, [], {#branchId: branchId}),
      returnValue: 0) as int);
  @override
  List<_i2.OrderFSync> weeklyOrdersReport(
          {DateTime? weekStartDate, DateTime? weekEndDate, int? branchId}) =>
      (super.noSuchMethod(
          Invocation.method(#weeklyOrdersReport, [], {
            #weekStartDate: weekStartDate,
            #weekEndDate: weekEndDate,
            #branchId: branchId
          }),
          returnValue: <_i2.OrderFSync>[]) as List<_i2.OrderFSync>);
  @override
  _i10.Future<void> saveDiscount(
          {int? branchId, dynamic name, double? amount}) =>
      (super.noSuchMethod(
              Invocation.method(#saveDiscount, [],
                  {#branchId: branchId, #name: name, #amount: amount}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<List<_i2.DiscountSync>> getDiscounts({int? branchId}) => (super
          .noSuchMethod(
              Invocation.method(#getDiscounts, [], {#branchId: branchId}),
              returnValue:
                  Future<List<_i2.DiscountSync>>.value(<_i2.DiscountSync>[]))
      as _i10.Future<List<_i2.DiscountSync>>);
  @override
  _i2.OrderFSync addOrderItem(
          {_i2.OrderFSync? order, Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrderItem, [], {#order: order, #data: data}),
          returnValue: _FakeOrderFSync_3()) as _i2.OrderFSync);
  @override
  void emptySentMessageQueue() =>
      super.noSuchMethod(Invocation.method(#emptySentMessageQueue, []),
          returnValueForMissingStub: null);
  @override
  bool suggestRestore() =>
      (super.noSuchMethod(Invocation.method(#suggestRestore, []),
          returnValue: false) as bool);
  @override
  _i10.Future<int> userNameAvailable({String? name}) => (super.noSuchMethod(
      Invocation.method(#userNameAvailable, [], {#name: name}),
      returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i2.TenantSync?> isTenant({String? phoneNumber}) =>
      (super.noSuchMethod(
              Invocation.method(#isTenant, [], {#phoneNumber: phoneNumber}),
              returnValue: Future<_i2.TenantSync?>.value())
          as _i10.Future<_i2.TenantSync?>);
  @override
  _i10.Future<_i2.Business> getBusinessFromOnlineGivenId({int? id}) =>
      (super.noSuchMethod(
              Invocation.method(#getBusinessFromOnlineGivenId, [], {#id: id}),
              returnValue: Future<_i2.Business>.value(_FakeBusiness_5()))
          as _i10.Future<_i2.Business>);
  @override
  _i10.Future<void> syncProduct(
          {_i2.ProductSync? product,
          _i2.VariantSync? variant,
          _i2.StockSync? stock}) =>
      (super.noSuchMethod(
              Invocation.method(#syncProduct, [],
                  {#product: product, #variant: variant, #stock: stock}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  void migrateToSync() =>
      super.noSuchMethod(Invocation.method(#migrateToSync, []),
          returnValueForMissingStub: null);
  @override
  bool isSubscribed({String? feature, int? businessId}) => (super.noSuchMethod(
      Invocation.method(
          #isSubscribed, [], {#feature: feature, #businessId: businessId}),
      returnValue: false) as bool);
  @override
  bool subscribe({String? feature, int? businessId, int? agentCode}) =>
      (super.noSuchMethod(
          Invocation.method(#subscribe, [], {
            #feature: feature,
            #businessId: businessId,
            #agentCode: agentCode
          }),
          returnValue: false) as bool);
  @override
  _i10.Future<bool> checkIn({String? checkInCode}) => (super.noSuchMethod(
      Invocation.method(#checkIn, [], {#checkInCode: checkInCode}),
      returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i10.Future<bool> enableAttendance({int? businessId, String? email}) =>
      (super.noSuchMethod(
          Invocation.method(
              #enableAttendance, [], {#businessId: businessId, #email: email}),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  _i2.Profile? profile({int? businessId}) => (super.noSuchMethod(
          Invocation.method(#profile, [], {#businessId: businessId}))
      as _i2.Profile?);
  @override
  _i2.Profile? updateProfile({_i2.Profile? profile}) => (super.noSuchMethod(
          Invocation.method(#updateProfile, [], {#profile: profile}))
      as _i2.Profile?);
  @override
  void saveTenant({String? phoneNumber}) => super.noSuchMethod(
      Invocation.method(#saveTenant, [], {#phoneNumber: phoneNumber}),
      returnValueForMissingStub: null);
  @override
  _i2.Points addPoint({int? userId, int? point}) => (super.noSuchMethod(
      Invocation.method(#addPoint, [], {#userId: userId, #point: point}),
      returnValue: _FakePoints_6()) as _i2.Points);
  @override
  _i2.Subscription addUpdateSubscription(
          {int? userId,
          int? interval,
          double? recurringAmount,
          String? descriptor,
          List<_i2.Feature>? features}) =>
      (super.noSuchMethod(
          Invocation.method(#addUpdateSubscription, [], {
            #userId: userId,
            #interval: interval,
            #recurringAmount: recurringAmount,
            #descriptor: descriptor,
            #features: features
          }),
          returnValue: _FakeSubscription_7()) as _i2.Subscription);
  @override
  _i2.Subscription? getSubscription({int? userId}) => (super.noSuchMethod(
          Invocation.method(#getSubscription, [], {#userId: userId}))
      as _i2.Subscription?);
  @override
  _i2.Points? getPoints({int? userId}) =>
      (super.noSuchMethod(Invocation.method(#getPoints, [], {#userId: userId}))
          as _i2.Points?);
  @override
  void consumePoints({int? userId, int? points}) => super.noSuchMethod(
      Invocation.method(#consumePoints, [], {#userId: userId, #points: points}),
      returnValueForMissingStub: null);
  @override
  _i10.Future<_i2.Pin?> createPin() =>
      (super.noSuchMethod(Invocation.method(#createPin, []),
          returnValue: Future<_i2.Pin?>.value()) as _i10.Future<_i2.Pin?>);
  @override
  _i10.Future<_i2.Pin?> getPin({String? pin}) =>
      (super.noSuchMethod(Invocation.method(#getPin, [], {#pin: pin}),
          returnValue: Future<_i2.Pin?>.value()) as _i10.Future<_i2.Pin?>);
}

/// A class which mocks [Language].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguage extends _i1.Mock implements _i11.Language {
  @override
  void setLocale({String? lang}) =>
      super.noSuchMethod(Invocation.method(#setLocale, [], {#lang: lang}),
          returnValueForMissingStub: null);
}

/// A class which mocks [LanguageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageService extends _i1.Mock implements _i11.LanguageService {
  @override
  _i3.Locale get locale => (super.noSuchMethod(Invocation.getter(#locale),
      returnValue: _FakeLocale_8()) as _i3.Locale);
  @override
  void setLocale({String? lang}) =>
      super.noSuchMethod(Invocation.method(#setLocale, [], {#lang: lang}),
          returnValueForMissingStub: null);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Remote].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemote extends _i1.Mock implements _i12.Remote {
  @override
  void setDefault() => super.noSuchMethod(Invocation.method(#setDefault, []),
      returnValueForMissingStub: null);
  @override
  void fetch() => super.noSuchMethod(Invocation.method(#fetch, []),
      returnValueForMissingStub: null);
  @override
  bool isChatAvailable() =>
      (super.noSuchMethod(Invocation.method(#isChatAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSpennPaymentAvailable() =>
      (super.noSuchMethod(Invocation.method(#isSpennPaymentAvailable, []),
          returnValue: false) as bool);
  @override
  bool isEmailReceiptAvailable() =>
      (super.noSuchMethod(Invocation.method(#isEmailReceiptAvailable, []),
          returnValue: false) as bool);
  @override
  bool isAddCustomerToSaleAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAddCustomerToSaleAvailable, []),
          returnValue: false) as bool);
  @override
  bool isPrinterAvailable() =>
      (super.noSuchMethod(Invocation.method(#isPrinterAvailable, []),
          returnValue: false) as bool);
  @override
  bool forceDateEntry() =>
      (super.noSuchMethod(Invocation.method(#forceDateEntry, []),
          returnValue: false) as bool);
  @override
  bool isAnalyticFeatureAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAnalyticFeatureAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSubmitDeviceTokenEnabled() =>
      (super.noSuchMethod(Invocation.method(#isSubmitDeviceTokenEnabled, []),
          returnValue: false) as bool);
  @override
  bool scannSelling() =>
      (super.noSuchMethod(Invocation.method(#scannSelling, []),
          returnValue: false) as bool);
  @override
  void config() => super.noSuchMethod(Invocation.method(#config, []),
      returnValueForMissingStub: null);
  @override
  bool isMenuAvailable() =>
      (super.noSuchMethod(Invocation.method(#isMenuAvailable, []),
          returnValue: false) as bool);
  @override
  bool isDiscountAvailable() =>
      (super.noSuchMethod(Invocation.method(#isDiscountAvailable, []),
          returnValue: false) as bool);
  @override
  bool isOrderAvailable() =>
      (super.noSuchMethod(Invocation.method(#isOrderAvailable, []),
          returnValue: false) as bool);
  @override
  bool isBackupAvailable() =>
      (super.noSuchMethod(Invocation.method(#isBackupAvailable, []),
          returnValue: false) as bool);
  @override
  bool isRemoteLoggingDynamicLinkEnabled() => (super.noSuchMethod(
      Invocation.method(#isRemoteLoggingDynamicLinkEnabled, []),
      returnValue: false) as bool);
  @override
  bool isAccessiblityFeatureAvailable() => (super.noSuchMethod(
      Invocation.method(#isAccessiblityFeatureAvailable, []),
      returnValue: false) as bool);
  @override
  bool isMapAvailable() =>
      (super.noSuchMethod(Invocation.method(#isMapAvailable, []),
          returnValue: false) as bool);
  @override
  bool isAInvitingMembersAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAInvitingMembersAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSyncAvailable() =>
      (super.noSuchMethod(Invocation.method(#isSyncAvailable, []),
          returnValue: false) as bool);
  @override
  bool isGoogleLoginAvailable() =>
      (super.noSuchMethod(Invocation.method(#isGoogleLoginAvailable, []),
          returnValue: false) as bool);
  @override
  bool isResetSettingEnabled() =>
      (super.noSuchMethod(Invocation.method(#isResetSettingEnabled, []),
          returnValue: false) as bool);
  @override
  bool isLinkedDeviceAvailable() =>
      (super.noSuchMethod(Invocation.method(#isLinkedDeviceAvailable, []),
          returnValue: false) as bool);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i13.FirebaseMessaging {
  @override
  _i4.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_9()) as _i4.FirebaseApp);
  @override
  set app(_i4.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoInitEnabled),
          returnValue: false) as bool);
  @override
  _i10.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(Invocation.getter(#onTokenRefresh),
          returnValue: Stream<String>.empty()) as _i10.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i10.Future<_i5.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future<_i5.RemoteMessage?>.value())
          as _i10.Future<_i5.RemoteMessage?>);
  @override
  _i10.Future<void> deleteToken() => (super.noSuchMethod(
      Invocation.method(#deleteToken, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(Invocation.method(#getAPNSToken, []),
          returnValue: Future<String?>.value()) as _i10.Future<String?>);
  @override
  _i10.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
      Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
      returnValue: Future<String?>.value()) as _i10.Future<String?>);
  @override
  bool isSupported() => (super.noSuchMethod(Invocation.method(#isSupported, []),
      returnValue: false) as bool);
  @override
  _i10.Future<_i5.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(Invocation.method(#getNotificationSettings, []),
              returnValue: Future<_i5.NotificationSettings>.value(
                  _FakeNotificationSettings_10()))
          as _i10.Future<_i5.NotificationSettings>);
  @override
  _i10.Future<_i5.NotificationSettings> requestPermission(
          {bool? alert = true,
          bool? announcement = false,
          bool? badge = true,
          bool? carPlay = false,
          bool? criticalAlert = false,
          bool? provisional = false,
          bool? sound = true}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [], {
                #alert: alert,
                #announcement: announcement,
                #badge: badge,
                #carPlay: carPlay,
                #criticalAlert: criticalAlert,
                #provisional: provisional,
                #sound: sound
              }),
              returnValue: Future<_i5.NotificationSettings>.value(
                  _FakeNotificationSettings_10()))
          as _i10.Future<_i5.NotificationSettings>);
  @override
  _i10.Future<void> sendMessage(
          {String? to,
          Map<String, String>? data,
          String? collapseKey,
          String? messageId,
          String? messageType,
          int? ttl}) =>
      (super.noSuchMethod(
              Invocation.method(#sendMessage, [], {
                #to: to,
                #data: data,
                #collapseKey: collapseKey,
                #messageId: messageId,
                #messageType: messageType,
                #ttl: ttl
              }),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> setAutoInitEnabled(bool? enabled) => (super.noSuchMethod(
      Invocation.method(#setAutoInitEnabled, [enabled]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setForegroundNotificationPresentationOptions(
          {bool? alert = false, bool? badge = false, bool? sound = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #setForegroundNotificationPresentationOptions,
                  [],
                  {#alert: alert, #badge: badge, #sound: sound}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> subscribeToTopic(String? topic) => (super.noSuchMethod(
      Invocation.method(#subscribeToTopic, [topic]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> unsubscribeFromTopic(String? topic) => (super.noSuchMethod(
      Invocation.method(#unsubscribeFromTopic, [topic]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i14.ProductService {
  @override
  _i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as _i6.Logger);
  @override
  String get barCode =>
      (super.noSuchMethod(Invocation.getter(#barCode), returnValue: '')
          as String);
  @override
  List<_i2.DiscountSync> get discounts =>
      (super.noSuchMethod(Invocation.getter(#discounts),
          returnValue: <_i2.DiscountSync>[]) as List<_i2.DiscountSync>);
  @override
  List<_i2.ProductSync> get products =>
      (super.noSuchMethod(Invocation.getter(#products),
          returnValue: <_i2.ProductSync>[]) as List<_i2.ProductSync>);
  @override
  List<_i2.StockSync> get stocks =>
      (super.noSuchMethod(Invocation.getter(#stocks),
          returnValue: <_i2.StockSync>[]) as List<_i2.StockSync>);
  @override
  void setBarcode(String? value) =>
      super.noSuchMethod(Invocation.method(#setBarcode, [value]),
          returnValueForMissingStub: null);
  @override
  dynamic setProductUnit({String? unit}) =>
      super.noSuchMethod(Invocation.method(#setProductUnit, [], {#unit: unit}));
  @override
  dynamic setCurrentProduct({_i2.ProductSync? product}) => super.noSuchMethod(
      Invocation.method(#setCurrentProduct, [], {#product: product}));
  @override
  _i10.Future<void> variantsProduct({int? productId}) => (super.noSuchMethod(
      Invocation.method(#variantsProduct, [], {#productId: productId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<List<_i2.ProductSync>> loadProducts({int? branchId}) => (super
      .noSuchMethod(Invocation.method(#loadProducts, [], {#branchId: branchId}),
          returnValue:
              Future<List<_i2.ProductSync>>.value(<_i2.ProductSync>[])) as _i10
      .Future<List<_i2.ProductSync>>);
  @override
  _i10.Future<void> filtterProduct({String? searchKey, int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#filtterProduct, [],
                  {#searchKey: searchKey, #branchId: branchId}),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<_i2.ProductSync?> getProductByBarCode({String? code}) =>
      (super.noSuchMethod(
              Invocation.method(#getProductByBarCode, [], {#code: code}),
              returnValue: Future<_i2.ProductSync?>.value())
          as _i10.Future<_i2.ProductSync?>);
  @override
  List<_i2.StockSync> loadStockByProductId({int? productId}) =>
      (super.noSuchMethod(
          Invocation.method(#loadStockByProductId, [], {#productId: productId}),
          returnValue: <_i2.StockSync>[]) as List<_i2.StockSync>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [KeyPadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyPadService extends _i1.Mock implements _i15.KeyPadService {
  @override
  _i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as _i6.Logger);
  @override
  _i7.Stack<dynamic> get stack => (super.noSuchMethod(Invocation.getter(#stack),
      returnValue: _FakeStack_12<dynamic>()) as _i7.Stack<dynamic>);
  @override
  set stack(_i7.Stack<dynamic>? _stack) =>
      super.noSuchMethod(Invocation.setter(#stack, _stack),
          returnValueForMissingStub: null);
  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  int get countOrderItems =>
      (super.noSuchMethod(Invocation.getter(#countOrderItems), returnValue: 0)
          as int);
  @override
  double get amountTotal =>
      (super.noSuchMethod(Invocation.getter(#amountTotal), returnValue: 0.0)
          as double);
  @override
  int get check =>
      (super.noSuchMethod(Invocation.getter(#check), returnValue: 0) as int);
  @override
  List<_i2.OrderFSync> get tickets =>
      (super.noSuchMethod(Invocation.getter(#tickets),
          returnValue: <_i2.OrderFSync>[]) as List<_i2.OrderFSync>);
  @override
  double get totalPayable =>
      (super.noSuchMethod(Invocation.getter(#totalPayable), returnValue: 0.0)
          as double);
  @override
  double get totalDiscount =>
      (super.noSuchMethod(Invocation.getter(#totalDiscount), returnValue: 0.0)
          as double);
  @override
  void addKey(String? key) =>
      super.noSuchMethod(Invocation.method(#addKey, [key]),
          returnValueForMissingStub: null);
  @override
  dynamic setAmount({double? amount}) =>
      super.noSuchMethod(Invocation.method(#setAmount, [], {#amount: amount}));
  @override
  dynamic setCashReceived({double? amount}) => super
      .noSuchMethod(Invocation.method(#setCashReceived, [], {#amount: amount}));
  @override
  void toggleCheckbox({int? variantId}) => super.noSuchMethod(
      Invocation.method(#toggleCheckbox, [], {#variantId: variantId}),
      returnValueForMissingStub: null);
  @override
  dynamic setCount({int? count}) =>
      super.noSuchMethod(Invocation.method(#setCount, [], {#count: count}));
  @override
  _i10.Future<List<_i2.OrderFSync>> getTickets() => (super.noSuchMethod(
          Invocation.method(#getTickets, []),
          returnValue: Future<List<_i2.OrderFSync>>.value(<_i2.OrderFSync>[]))
      as _i10.Future<List<_i2.OrderFSync>>);
  @override
  void setTotalPayable({double? amount}) => super.noSuchMethod(
      Invocation.method(#setTotalPayable, [], {#amount: amount}),
      returnValueForMissingStub: null);
  @override
  void setTotalDiscount({double? amount}) => super.noSuchMethod(
      Invocation.method(#setTotalDiscount, [], {#amount: amount}),
      returnValueForMissingStub: null);
  @override
  void setOrder(_i2.OrderFSync? order) =>
      super.noSuchMethod(Invocation.method(#setOrder, [order]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i2.OrderFSync?> getOrder({int? branchId}) => (super.noSuchMethod(
          Invocation.method(#getOrder, [], {#branchId: branchId}),
          returnValue: Future<_i2.OrderFSync?>.value())
      as _i10.Future<_i2.OrderFSync?>);
  @override
  _i10.Future<_i2.OrderFSync?> getOrderById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderById, [], {#id: id}),
              returnValue: Future<_i2.OrderFSync?>.value())
          as _i10.Future<_i2.OrderFSync?>);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
  @override
  void customQtyIncrease({int? qty}) =>
      super.noSuchMethod(Invocation.method(#customQtyIncrease, [], {#qty: qty}),
          returnValueForMissingStub: null);
  @override
  void increaseQty() => super.noSuchMethod(Invocation.method(#increaseQty, []),
      returnValueForMissingStub: null);
  @override
  void decreaseQty() => super.noSuchMethod(Invocation.method(#decreaseQty, []),
      returnValueForMissingStub: null);
  @override
  void pop() => super.noSuchMethod(Invocation.method(#pop, []),
      returnValueForMissingStub: null);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i16.SettingsService {
  @override
  _i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as _i6.Logger);
  @override
  _i8.ReactiveValue<_i17.ThemeMode> get themeMode =>
      (super.noSuchMethod(Invocation.getter(#themeMode),
              returnValue: _FakeReactiveValue_13<_i17.ThemeMode>())
          as _i8.ReactiveValue<_i17.ThemeMode>);
  @override
  bool get enablePrinter =>
      (super.noSuchMethod(Invocation.getter(#enablePrinter), returnValue: false)
          as bool);
  @override
  bool get sendDailReport => (super
          .noSuchMethod(Invocation.getter(#sendDailReport), returnValue: false)
      as bool);
  @override
  bool get isAttendanceEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAttendanceEnabled),
          returnValue: false) as bool);
  @override
  void setThemeMode(_i17.ThemeMode? mode) =>
      super.noSuchMethod(Invocation.method(#setThemeMode, [mode]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<bool> updateSettings({Map<dynamic, dynamic>? map}) =>
      (super.noSuchMethod(Invocation.method(#updateSettings, [], {#map: map}),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
  @override
  bool isDailyReportEnabled() =>
      (super.noSuchMethod(Invocation.method(#isDailyReportEnabled, []),
          returnValue: false) as bool);
  @override
  bool enabledPrint() =>
      (super.noSuchMethod(Invocation.method(#enabledPrint, []),
          returnValue: false) as bool);
  @override
  void enablePrint({bool? bool}) =>
      super.noSuchMethod(Invocation.method(#enablePrint, [], {#bool: bool}),
          returnValueForMissingStub: null);
  @override
  void getEnableReportToggleState() =>
      super.noSuchMethod(Invocation.method(#getEnableReportToggleState, []),
          returnValueForMissingStub: null);
  @override
  void getEnableAttendanceToggleState() =>
      super.noSuchMethod(Invocation.method(#getEnableAttendanceToggleState, []),
          returnValueForMissingStub: null);
  @override
  void toggleAttendanceSetting() =>
      super.noSuchMethod(Invocation.method(#toggleAttendanceSetting, []),
          returnValueForMissingStub: null);
  @override
  void toggleDailyReportSetting() =>
      super.noSuchMethod(Invocation.method(#toggleDailyReportSetting, []),
          returnValueForMissingStub: null);
  @override
  _i10.Future<Function?> enableAttendance({bool? bool, Function? callback}) =>
      (super.noSuchMethod(
          Invocation.method(
              #enableAttendance, [], {#bool: bool, #callback: callback}),
          returnValue: Future<Function?>.value()) as _i10.Future<Function?>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i18.LocalStorage {
  @override
  dynamic read({String? key}) =>
      super.noSuchMethod(Invocation.method(#read, [], {#key: key}));
  @override
  dynamic remove({String? key}) =>
      super.noSuchMethod(Invocation.method(#remove, [], {#key: key}));
  @override
  bool write({String? key, dynamic value}) => (super.noSuchMethod(
      Invocation.method(#write, [], {#key: key, #value: value}),
      returnValue: false) as bool);
  @override
  bool getNeedAccountLinkWithPhone() =>
      (super.noSuchMethod(Invocation.method(#getNeedAccountLinkWithPhone, []),
          returnValue: false) as bool);
}

/// A class which mocks [AppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppService extends _i1.Mock implements _i19.AppService {
  @override
  _i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as _i6.Logger);
  @override
  List<_i2.Category> get categories =>
      (super.noSuchMethod(Invocation.getter(#categories),
          returnValue: <_i2.Category>[]) as List<_i2.Category>);
  @override
  List<_i2.Business> get businesses =>
      (super.noSuchMethod(Invocation.getter(#businesses),
          returnValue: <_i2.Business>[]) as List<_i2.Business>);
  @override
  List<_i2.Unit> get units =>
      (super.noSuchMethod(Invocation.getter(#units), returnValue: <_i2.Unit>[])
          as List<_i2.Unit>);
  @override
  List<_i2.PColor> get colors => (super.noSuchMethod(Invocation.getter(#colors),
      returnValue: <_i2.PColor>[]) as List<_i2.PColor>);
  @override
  String get currentColor =>
      (super.noSuchMethod(Invocation.getter(#currentColor), returnValue: '')
          as String);
  @override
  bool get hasLoggedInUser => (super
          .noSuchMethod(Invocation.getter(#hasLoggedInUser), returnValue: false)
      as bool);
  @override
  List<_i2.Business> get contacts =>
      (super.noSuchMethod(Invocation.getter(#contacts),
          returnValue: <_i2.Business>[]) as List<_i2.Business>);
  @override
  dynamic setCurrentColor({String? color}) => super
      .noSuchMethod(Invocation.method(#setCurrentColor, [], {#color: color}));
  @override
  dynamic setBusiness({List<_i2.Business>? businesses}) => super.noSuchMethod(
      Invocation.method(#setBusiness, [], {#businesses: businesses}));
  @override
  void loadCategories() =>
      super.noSuchMethod(Invocation.method(#loadCategories, []),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> loadUnits() => (super.noSuchMethod(
      Invocation.method(#loadUnits, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> loadColors() => (super.noSuchMethod(
      Invocation.method(#loadColors, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  bool isLoggedIn() => (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
      returnValue: false) as bool);
  @override
  _i10.Future<void> loadContacts() => (super.noSuchMethod(
      Invocation.method(#loadContacts, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FlipperLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlipperLocation extends _i1.Mock implements _i20.FlipperLocation {
  @override
  _i10.Future<Map<String, String>> getLocation() => (super.noSuchMethod(
          Invocation.method(#getLocation, []),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i10.Future<Map<String, String>>);
  @override
  _i10.Future<bool> doWeHaveLocationPermission() =>
      (super.noSuchMethod(Invocation.method(#doWeHaveLocationPermission, []),
          returnValue: Future<bool>.value(false)) as _i10.Future<bool>);
}

/// A class which mocks [BillingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBillingService extends _i1.Mock implements _i21.BillingService {
  @override
  _i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as _i6.Logger);
  @override
  _i10.Future<_i2.Voucher?> useVoucher({int? voucher, int? userId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #useVoucher, [], {#voucher: voucher, #userId: userId}),
              returnValue: Future<_i2.Voucher?>.value())
          as _i10.Future<_i2.Voucher?>);
  @override
  _i2.Points addPoints({int? points, int? userId}) => (super.noSuchMethod(
      Invocation.method(#addPoints, [], {#points: points, #userId: userId}),
      returnValue: _FakePoints_6()) as _i2.Points);
  @override
  _i2.Subscription updateSubscription(
          {int? userId,
          int? interval,
          List<_i2.Feature>? features,
          String? descriptor,
          double? amount}) =>
      (super.noSuchMethod(
          Invocation.method(#updateSubscription, [], {
            #userId: userId,
            #interval: interval,
            #features: features,
            #descriptor: descriptor,
            #amount: amount
          }),
          returnValue: _FakeSubscription_7()) as _i2.Subscription);
  @override
  bool activeSubscription() =>
      (super.noSuchMethod(Invocation.method(#activeSubscription, []),
          returnValue: false) as bool);
  @override
  void monitorSubscription({int? userId}) => super.noSuchMethod(
      Invocation.method(#monitorSubscription, [], {#userId: userId}),
      returnValueForMissingStub: null);
}
