// Mocks generated by Mockito 5.0.8 from annotations
// in flipper/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as _i16;

import 'package:firebase_core/firebase_core.dart' as _i11;
import 'package:firebase_messaging/firebase_messaging.dart' as _i25;
import 'package:firebase_messaging_platform_interface/src/notification_settings.dart'
    as _i12;
import 'package:firebase_messaging_platform_interface/src/remote_message.dart'
    as _i26;
import 'package:flipper/stack.dart' as _i14;
import 'package:flipper_models/branch.dart' as _i17;
import 'package:flipper_models/business.dart' as _i10;
import 'package:flipper_models/category.dart' as _i19;
import 'package:flipper_models/color.dart' as _i18;
import 'package:flipper_models/customer.dart' as _i23;
import 'package:flipper_models/login.dart' as _i2;
import 'package:flipper_models/message.dart' as _i9;
import 'package:flipper_models/order.dart' as _i6;
import 'package:flipper_models/order_item.dart' as _i21;
import 'package:flipper_models/product.dart' as _i5;
import 'package:flipper_models/setting.dart' as _i22;
import 'package:flipper_models/spenn.dart' as _i8;
import 'package:flipper_models/stock.dart' as _i4;
import 'package:flipper_models/sync.dart' as _i3;
import 'package:flipper_models/unit.dart' as _i20;
import 'package:flipper_models/variants.dart' as _i7;
import 'package:flipper_services/abstractions/api.dart' as _i15;
import 'package:flipper_services/abstractions/location.dart' as _i32;
import 'package:flipper_services/abstractions/remote.dart' as _i24;
import 'package:flipper_services/abstractions/storage.dart' as _i30;
import 'package:flipper_services/app_service.dart' as _i31;
import 'package:flipper_services/keypad_service.dart' as _i28;
import 'package:flipper_services/product_service.dart' as _i27;
import 'package:flipper_services/setting_service.dart' as _i29;
import 'package:flutter/src/animation/curves.dart' as _i36;
import 'package:flutter/src/widgets/framework.dart' as _i34;
import 'package:flutter/src/widgets/navigator.dart' as _i35;
import 'package:get/get_instance/src/bindings_interface.dart' as _i37;
import 'package:get/get_navigation/src/routes/transitions_type.dart' as _i38;
import 'package:logger/src/logger.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_services/src/navigation_service.dart' as _i33;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeLogin extends _i1.Fake implements _i2.Login {}

class _FakeSyncF extends _i1.Fake implements _i3.SyncF {}

class _FakeStock extends _i1.Fake implements _i4.Stock {}

class _FakeProduct extends _i1.Fake implements _i5.Product {}

class _FakeOrderF extends _i1.Fake implements _i6.OrderF {}

class _FakeVariant extends _i1.Fake implements _i7.Variant {}

class _FakeSpenn extends _i1.Fake implements _i8.Spenn {}

class _FakeMessage extends _i1.Fake implements _i9.Message {}

class _FakeBusiness extends _i1.Fake implements _i10.Business {}

class _FakeFirebaseApp extends _i1.Fake implements _i11.FirebaseApp {}

class _FakeNotificationSettings extends _i1.Fake
    implements _i12.NotificationSettings {}

class _FakeLogger extends _i1.Fake implements _i13.Logger {}

class _FakeStack<T> extends _i1.Fake implements _i14.Stack<T> {}

/// A class which mocks [Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockApi<T> extends _i1.Mock implements _i15.Api<T> {
  @override
  _i16.Future<_i2.Login> login({String? phone}) =>
      (super.noSuchMethod(Invocation.method(#login, [], {#phone: phone}),
              returnValue: Future<_i2.Login>.value(_FakeLogin()))
          as _i16.Future<_i2.Login>);
  @override
  _i16.Future<List<_i5.Product>> products({int? branchId}) => (super
          .noSuchMethod(Invocation.method(#products, [], {#branchId: branchId}),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
      as _i16.Future<List<_i5.Product>>);
  @override
  _i16.Future<int> signup({Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(Invocation.method(#signup, [], {#business: business}),
          returnValue: Future<int>.value(0)) as _i16.Future<int>);
  @override
  _i16.Future<_i3.SyncF> authenticateWithOfflineDb({String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#authenticateWithOfflineDb, [], {#userId: userId}),
          returnValue:
              Future<_i3.SyncF>.value(_FakeSyncF())) as _i16.Future<_i3.SyncF>);
  @override
  _i16.Future<List<_i10.Business>> businesses({String? userId}) =>
      (super.noSuchMethod(Invocation.method(#businesses, [], {#userId: userId}),
              returnValue: Future<List<_i10.Business>>.value(<_i10.Business>[]))
          as _i16.Future<List<_i10.Business>>);
  @override
  _i16.Future<List<_i17.Branch>> branches({int? businessId}) => (super
      .noSuchMethod(Invocation.method(#branches, [], {#businessId: businessId}),
          returnValue: Future<List<_i17.Branch>>.value(<_i17.Branch>[])) as _i16
      .Future<List<_i17.Branch>>);
  @override
  List<_i4.Stock> stocks({int? productId}) => (super.noSuchMethod(
      Invocation.method(#stocks, [], {#productId: productId}),
      returnValue: <_i4.Stock>[]) as List<_i4.Stock>);
  @override
  _i16.Stream<_i4.Stock> stockByVariantIdStream({int? variantId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #stockByVariantIdStream, [], {#variantId: variantId}),
          returnValue: Stream<_i4.Stock>.empty()) as _i16.Stream<_i4.Stock>);
  @override
  _i16.Future<_i4.Stock> stockByVariantId({int? variantId}) =>
      (super.noSuchMethod(
              Invocation.method(#stockByVariantId, [], {#variantId: variantId}),
              returnValue: Future<_i4.Stock>.value(_FakeStock()))
          as _i16.Future<_i4.Stock>);
  @override
  _i16.Future<List<_i18.PColor>> colors({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#colors, [], {#branchId: branchId}),
              returnValue: Future<List<_i18.PColor>>.value(<_i18.PColor>[]))
          as _i16.Future<List<_i18.PColor>>);
  @override
  _i16.Future<List<_i19.Category>> categories({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#categories, [], {#branchId: branchId}),
              returnValue: Future<List<_i19.Category>>.value(<_i19.Category>[]))
          as _i16.Future<List<_i19.Category>>);
  @override
  _i16.Future<List<_i20.Unit>> units({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#units, [], {#branchId: branchId}),
              returnValue: Future<List<_i20.Unit>>.value(<_i20.Unit>[]))
          as _i16.Future<List<_i20.Unit>>);
  @override
  _i16.Future<int> create<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as _i16.Future<int>);
  @override
  _i16.Future<int> update<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as _i16.Future<int>);
  @override
  _i16.Future<bool> delete({dynamic id, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {#id: id, #endPoint: endPoint}),
          returnValue: Future<bool>.value(false)) as _i16.Future<bool>);
  @override
  _i16.Future<_i18.PColor?> getColor({int? id, String? endPoint}) =>
      (super.noSuchMethod(
              Invocation.method(#getColor, [], {#id: id, #endPoint: endPoint}),
              returnValue: Future<_i18.PColor?>.value())
          as _i16.Future<_i18.PColor?>);
  @override
  _i16.Future<_i4.Stock?> getStock({int? branchId, int? variantId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getStock, [], {#branchId: branchId, #variantId: variantId}),
          returnValue: Future<_i4.Stock?>.value()) as _i16.Future<_i4.Stock?>);
  @override
  _i16.Future<List<_i7.Variant>> variants({int? branchId, int? productId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #variants, [], {#branchId: branchId, #productId: productId}),
              returnValue: Future<List<_i7.Variant>>.value(<_i7.Variant>[]))
          as _i16.Future<List<_i7.Variant>>);
  @override
  _i16.Future<_i7.Variant?> variant({int? variantId}) => (super.noSuchMethod(
      Invocation.method(#variant, [], {#variantId: variantId}),
      returnValue: Future<_i7.Variant?>.value()) as _i16.Future<_i7.Variant?>);
  @override
  _i16.Future<int> addUnits({Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(Invocation.method(#addUnits, [], {#data: data}),
          returnValue: Future<int>.value(0)) as _i16.Future<int>);
  @override
  _i16.Future<int> addVariant(
          {List<_i7.Variant>? data,
          double? retailPrice,
          double? supplyPrice}) =>
      (super.noSuchMethod(
          Invocation.method(#addVariant, [], {
            #data: data,
            #retailPrice: retailPrice,
            #supplyPrice: supplyPrice
          }),
          returnValue: Future<int>.value(0)) as _i16.Future<int>);
  @override
  _i16.Future<_i5.Product?> getProduct({int? id}) => (super.noSuchMethod(
      Invocation.method(#getProduct, [], {#id: id}),
      returnValue: Future<_i5.Product?>.value()) as _i16.Future<_i5.Product?>);
  @override
  _i16.Future<_i5.Product?> getProductByBarCode({String? barCode}) =>
      (super.noSuchMethod(
              Invocation.method(#getProductByBarCode, [], {#barCode: barCode}),
              returnValue: Future<_i5.Product?>.value())
          as _i16.Future<_i5.Product?>);
  @override
  _i16.Future<_i5.Product> createProduct({_i5.Product? product}) =>
      (super.noSuchMethod(
              Invocation.method(#createProduct, [], {#product: product}),
              returnValue: Future<_i5.Product>.value(_FakeProduct()))
          as _i16.Future<_i5.Product>);
  @override
  _i16.Future<List<_i5.Product>> isTempProductExist({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#isTempProductExist, [], {#branchId: branchId}),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
          as _i16.Future<List<_i5.Product>>);
  @override
  _i16.Future<bool> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<bool>.value(false)) as _i16.Future<bool>);
  @override
  _i16.Future<_i6.OrderF> createOrder(
          {double? customAmount,
          _i7.Variant? variation,
          double? price,
          bool? useProductName = false,
          String? orderType = r'custom',
          double? quantity = 1.0}) =>
      (super.noSuchMethod(
              Invocation.method(#createOrder, [], {
                #customAmount: customAmount,
                #variation: variation,
                #price: price,
                #useProductName: useProductName,
                #orderType: orderType,
                #quantity: quantity
              }),
              returnValue: Future<_i6.OrderF>.value(_FakeOrderF()))
          as _i16.Future<_i6.OrderF>);
  @override
  _i16.Future<List<_i6.OrderF>> orders({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#orders, [], {#branchId: branchId}),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  _i16.Future<_i21.OrderItem?> getOrderItem({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderItem, [], {#id: id}),
              returnValue: Future<_i21.OrderItem?>.value())
          as _i16.Future<_i21.OrderItem?>);
  @override
  _i16.Future<_i7.Variant> getCustomProductVariant() =>
      (super.noSuchMethod(Invocation.method(#getCustomProductVariant, []),
              returnValue: Future<_i7.Variant>.value(_FakeVariant()))
          as _i16.Future<_i7.Variant>);
  @override
  _i16.Future<_i8.Spenn> spennPayment({double? amount, dynamic phoneNumber}) =>
      (super.noSuchMethod(
          Invocation.method(
              #spennPayment, [], {#amount: amount, #phoneNumber: phoneNumber}),
          returnValue:
              Future<_i8.Spenn>.value(_FakeSpenn())) as _i16.Future<_i8.Spenn>);
  @override
  _i16.Future<void> collectCashPayment(
          {double? cashReceived, _i6.OrderF? order}) =>
      (super.noSuchMethod(
          Invocation.method(#collectCashPayment, [],
              {#cashReceived: cashReceived, #order: order}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i22.Setting? getSetting({int? userId}) =>
      (super.noSuchMethod(Invocation.method(#getSetting, [], {#userId: userId}))
          as _i22.Setting?);
  @override
  _i16.Future<_i22.Setting?> createSetting(
          {int? userId, _i22.Setting? setting}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createSetting, [], {#userId: userId, #setting: setting}),
              returnValue: Future<_i22.Setting?>.value())
          as _i16.Future<_i22.Setting?>);
  @override
  _i16.Stream<List<_i9.Message>> getChats({int? receiverId}) => (super
      .noSuchMethod(Invocation.method(#getChats, [], {#receiverId: receiverId}),
          returnValue: Stream<List<_i9.Message>>.empty()) as _i16
      .Stream<List<_i9.Message>>);
  @override
  void sendMessage({int? receiverId, String? message}) => super.noSuchMethod(
      Invocation.method(
          #sendMessage, [], {#receiverId: receiverId, #message: message}),
      returnValueForMissingStub: null);
  @override
  _i16.Future<_i9.Message> getConversations({int? authorId}) => (super
          .noSuchMethod(
              Invocation.method(#getConversations, [], {#authorId: authorId}),
              returnValue: Future<_i9.Message>.value(_FakeMessage()))
      as _i16.Future<_i9.Message>);
  @override
  _i16.Stream<List<_i10.Business>> users() =>
      (super.noSuchMethod(Invocation.method(#users, []),
              returnValue: Stream<List<_i10.Business>>.empty())
          as _i16.Stream<List<_i10.Business>>);
  @override
  _i16.Future<List<_i10.Business>> contacts() =>
      (super.noSuchMethod(Invocation.method(#contacts, []),
              returnValue: Future<List<_i10.Business>>.value(<_i10.Business>[]))
          as _i16.Future<List<_i10.Business>>);
  @override
  _i10.Business getBusiness() =>
      (super.noSuchMethod(Invocation.method(#getBusiness, []),
          returnValue: _FakeBusiness()) as _i10.Business);
  @override
  _i23.Customer? addCustomer({Map<dynamic, dynamic>? customer, int? orderId}) =>
      (super.noSuchMethod(Invocation.method(
              #addCustomer, [], {#customer: customer, #orderId: orderId}))
          as _i23.Customer?);
  @override
  _i16.Future<dynamic> assingOrderToCustomer({int? customerId, int? orderId}) =>
      (super.noSuchMethod(
          Invocation.method(#assingOrderToCustomer, [],
              {#customerId: customerId, #orderId: orderId}),
          returnValue: Future<dynamic>.value()) as _i16.Future<dynamic>);
  @override
  _i16.Stream<_i23.Customer?> getCustomer({String? key}) =>
      (super.noSuchMethod(Invocation.method(#getCustomer, [], {#key: key}),
              returnValue: Stream<_i23.Customer?>.empty())
          as _i16.Stream<_i23.Customer?>);
  @override
  _i16.Stream<_i23.Customer?> getCustomerByOrderId({int? id}) => (super
          .noSuchMethod(Invocation.method(#getCustomerByOrderId, [], {#id: id}),
              returnValue: Stream<_i23.Customer?>.empty())
      as _i16.Stream<_i23.Customer?>);
  @override
  _i16.Future<List<_i6.OrderF>> getOrderById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderById, [], {#id: id}),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  _i16.Future<List<_i6.OrderF>> tickets() =>
      (super.noSuchMethod(Invocation.method(#tickets, []),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  _i16.Future<List<_i7.Variant>> getVariantByProductId({int? productId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getVariantByProductId, [], {#productId: productId}),
              returnValue: Future<List<_i7.Variant>>.value(<_i7.Variant>[]))
          as _i16.Future<List<_i7.Variant>>);
  @override
  _i16.Future<List<_i6.OrderF>> getOrderByStatus({String? status}) =>
      (super.noSuchMethod(
              Invocation.method(#getOrderByStatus, [], {#status: status}),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  _i16.Future<void> sendReport({List<_i6.OrderF>? orders}) =>
      (super.noSuchMethod(Invocation.method(#sendReport, [], {#orders: orders}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<void> createGoogleSheetDoc() =>
      (super.noSuchMethod(Invocation.method(#createGoogleSheetDoc, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i10.Business getBusinessById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getBusinessById, [], {#id: id}),
          returnValue: _FakeBusiness()) as _i10.Business);
  @override
  _i21.OrderItem? getOrderItemByVariantId({int? variantId}) =>
      (super.noSuchMethod(Invocation.method(
              #getOrderItemByVariantId, [], {#variantId: variantId}))
          as _i21.OrderItem?);
  @override
  _i16.Future<void> updateBusiness(
          {int? id, Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateBusiness, [], {#id: id, #business: business}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  int lifeTimeCustomersForbranch({int? branchId}) => (super.noSuchMethod(
      Invocation.method(#lifeTimeCustomersForbranch, [], {#branchId: branchId}),
      returnValue: 0) as int);
  @override
  List<_i6.OrderF> weeklyOrdersReport(
          {DateTime? weekStartDate, DateTime? weekEndDate, int? branchId}) =>
      (super.noSuchMethod(
          Invocation.method(#weeklyOrdersReport, [], {
            #weekStartDate: weekStartDate,
            #weekEndDate: weekEndDate,
            #branchId: branchId
          }),
          returnValue: <_i6.OrderF>[]) as List<_i6.OrderF>);
  @override
  _i16.Future<void> saveDiscount(
          {int? branchId, dynamic name, double? amount}) =>
      (super.noSuchMethod(
          Invocation.method(#saveDiscount, [],
              {#branchId: branchId, #name: name, #amount: amount}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i6.OrderF addOrderItem({_i6.OrderF? order, Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrderItem, [], {#order: order, #data: data}),
          returnValue: _FakeOrderF()) as _i6.OrderF);
}

/// A class which mocks [Remote].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemote extends _i1.Mock implements _i24.Remote {
  @override
  void setDefault() => super.noSuchMethod(Invocation.method(#setDefault, []),
      returnValueForMissingStub: null);
  @override
  void fetch() => super.noSuchMethod(Invocation.method(#fetch, []),
      returnValueForMissingStub: null);
  @override
  bool isChatAvailable() =>
      (super.noSuchMethod(Invocation.method(#isChatAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSpennPaymentAvailable() =>
      (super.noSuchMethod(Invocation.method(#isSpennPaymentAvailable, []),
          returnValue: false) as bool);
  @override
  bool isEmailReceiptAvailable() =>
      (super.noSuchMethod(Invocation.method(#isEmailReceiptAvailable, []),
          returnValue: false) as bool);
  @override
  bool isAddCustomerToSaleAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAddCustomerToSaleAvailable, []),
          returnValue: false) as bool);
  @override
  bool isPrinterAvailable() =>
      (super.noSuchMethod(Invocation.method(#isPrinterAvailable, []),
          returnValue: false) as bool);
  @override
  bool forceDateEntry() =>
      (super.noSuchMethod(Invocation.method(#forceDateEntry, []),
          returnValue: false) as bool);
  @override
  bool isAnalyticFeatureAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAnalyticFeatureAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSubmitDeviceTokenEnabled() =>
      (super.noSuchMethod(Invocation.method(#isSubmitDeviceTokenEnabled, []),
          returnValue: false) as bool);
  @override
  bool scann_selling() =>
      (super.noSuchMethod(Invocation.method(#scann_selling, []),
          returnValue: false) as bool);
  @override
  void config() => super.noSuchMethod(Invocation.method(#config, []),
      returnValueForMissingStub: null);
  @override
  bool isMenuAvailable() =>
      (super.noSuchMethod(Invocation.method(#isMenuAvailable, []),
          returnValue: false) as bool);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i25.FirebaseMessaging {
  @override
  _i11.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i11.FirebaseApp);
  @override
  set app(_i11.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoInitEnabled),
          returnValue: false) as bool);
  @override
  _i16.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(Invocation.getter(#onTokenRefresh),
          returnValue: Stream<String>.empty()) as _i16.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i16.Future<_i26.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future<_i26.RemoteMessage?>.value())
          as _i16.Future<_i26.RemoteMessage?>);
  @override
  _i16.Future<void> deleteToken() =>
      (super.noSuchMethod(Invocation.method(#deleteToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(Invocation.method(#getAPNSToken, []),
          returnValue: Future<String?>.value()) as _i16.Future<String?>);
  @override
  _i16.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
      Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
      returnValue: Future<String?>.value()) as _i16.Future<String?>);
  @override
  bool isSupported() => (super.noSuchMethod(Invocation.method(#isSupported, []),
      returnValue: false) as bool);
  @override
  _i16.Future<_i12.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(Invocation.method(#getNotificationSettings, []),
              returnValue: Future<_i12.NotificationSettings>.value(
                  _FakeNotificationSettings()))
          as _i16.Future<_i12.NotificationSettings>);
  @override
  _i16.Future<_i12.NotificationSettings> requestPermission(
          {bool? alert = true,
          bool? announcement = false,
          bool? badge = true,
          bool? carPlay = false,
          bool? criticalAlert = false,
          bool? provisional = false,
          bool? sound = true}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [], {
                #alert: alert,
                #announcement: announcement,
                #badge: badge,
                #carPlay: carPlay,
                #criticalAlert: criticalAlert,
                #provisional: provisional,
                #sound: sound
              }),
              returnValue: Future<_i12.NotificationSettings>.value(
                  _FakeNotificationSettings()))
          as _i16.Future<_i12.NotificationSettings>);
  @override
  _i16.Future<void> sendMessage(
          {String? to,
          Map<String, String>? data,
          String? collapseKey,
          String? messageId,
          String? messageType,
          int? ttl}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [], {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<void> setAutoInitEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setAutoInitEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<void> setForegroundNotificationPresentationOptions(
          {bool? alert = false, bool? badge = false, bool? sound = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setForegroundNotificationPresentationOptions, [],
              {#alert: alert, #badge: badge, #sound: sound}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#subscribeToTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#unsubscribeFromTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i27.ProductService {
  @override
  _i13.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger())
          as _i13.Logger);
  @override
  String get barCode =>
      (super.noSuchMethod(Invocation.getter(#barCode), returnValue: '')
          as String);
  @override
  List<_i5.Product> get products =>
      (super.noSuchMethod(Invocation.getter(#products),
          returnValue: <_i5.Product>[]) as List<_i5.Product>);
  @override
  List<_i4.Stock> get stocks => (super.noSuchMethod(Invocation.getter(#stocks),
      returnValue: <_i4.Stock>[]) as List<_i4.Stock>);
  @override
  void setBarcode(String? value) =>
      super.noSuchMethod(Invocation.method(#setBarcode, [value]),
          returnValueForMissingStub: null);
  @override
  dynamic setProductUnit({String? unit}) =>
      super.noSuchMethod(Invocation.method(#setProductUnit, [], {#unit: unit}));
  @override
  dynamic setCurrentProduct({_i5.Product? product}) => super.noSuchMethod(
      Invocation.method(#setCurrentProduct, [], {#product: product}));
  @override
  _i16.Future<void> variantsProduct({int? productId}) => (super.noSuchMethod(
      Invocation.method(#variantsProduct, [], {#productId: productId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<List<_i5.Product>> loadProducts({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#loadProducts, [], {#branchId: branchId}),
              returnValue: Future<List<_i5.Product>>.value(<_i5.Product>[]))
          as _i16.Future<List<_i5.Product>>);
  @override
  _i16.Future<void> filtterProduct({String? searchKey, int? branchId}) =>
      (super.noSuchMethod(
          Invocation.method(#filtterProduct, [],
              {#searchKey: searchKey, #branchId: branchId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<_i5.Product?> getProductByBarCode({String? code}) =>
      (super.noSuchMethod(
              Invocation.method(#getProductByBarCode, [], {#code: code}),
              returnValue: Future<_i5.Product?>.value())
          as _i16.Future<_i5.Product?>);
  @override
  List<_i4.Stock> loadStockByProductId({int? productId}) => (super.noSuchMethod(
      Invocation.method(#loadStockByProductId, [], {#productId: productId}),
      returnValue: <_i4.Stock>[]) as List<_i4.Stock>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [KeyPadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyPadService extends _i1.Mock implements _i28.KeyPadService {
  @override
  _i13.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger())
          as _i13.Logger);
  @override
  _i14.Stack<dynamic> get stack =>
      (super.noSuchMethod(Invocation.getter(#stack),
          returnValue: _FakeStack<dynamic>()) as _i14.Stack<dynamic>);
  @override
  set stack(_i14.Stack<dynamic>? _stack) =>
      super.noSuchMethod(Invocation.setter(#stack, _stack),
          returnValueForMissingStub: null);
  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  int get countOrderItems =>
      (super.noSuchMethod(Invocation.getter(#countOrderItems), returnValue: 0)
          as int);
  @override
  double get amountTotal =>
      (super.noSuchMethod(Invocation.getter(#amountTotal), returnValue: 0.0)
          as double);
  @override
  int get check =>
      (super.noSuchMethod(Invocation.getter(#check), returnValue: 0) as int);
  @override
  List<_i6.OrderF> get tickets =>
      (super.noSuchMethod(Invocation.getter(#tickets),
          returnValue: <_i6.OrderF>[]) as List<_i6.OrderF>);
  @override
  List<_i6.OrderF> get orders => (super.noSuchMethod(Invocation.getter(#orders),
      returnValue: <_i6.OrderF>[]) as List<_i6.OrderF>);
  @override
  void addKey(String? key) =>
      super.noSuchMethod(Invocation.method(#addKey, [key]),
          returnValueForMissingStub: null);
  @override
  dynamic setAmount({double? amount}) =>
      super.noSuchMethod(Invocation.method(#setAmount, [], {#amount: amount}));
  @override
  dynamic setCashReceived({double? amount}) => super
      .noSuchMethod(Invocation.method(#setCashReceived, [], {#amount: amount}));
  @override
  void toggleCheckbox({int? variantId}) => super.noSuchMethod(
      Invocation.method(#toggleCheckbox, [], {#variantId: variantId}),
      returnValueForMissingStub: null);
  @override
  dynamic setCount({int? count}) =>
      super.noSuchMethod(Invocation.method(#setCount, [], {#count: count}));
  @override
  _i16.Future<List<_i6.OrderF>> getTickets() =>
      (super.noSuchMethod(Invocation.method(#getTickets, []),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  _i16.Future<List<_i6.OrderF>> getOrders({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#getOrders, [], {#branchId: branchId}),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  _i16.Future<List<_i6.OrderF>> getOrderById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderById, [], {#id: id}),
              returnValue: Future<List<_i6.OrderF>>.value(<_i6.OrderF>[]))
          as _i16.Future<List<_i6.OrderF>>);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
  @override
  void customQtyIncrease({int? qty}) =>
      super.noSuchMethod(Invocation.method(#customQtyIncrease, [], {#qty: qty}),
          returnValueForMissingStub: null);
  @override
  void increaseQty() => super.noSuchMethod(Invocation.method(#increaseQty, []),
      returnValueForMissingStub: null);
  @override
  void decreaseQty() => super.noSuchMethod(Invocation.method(#decreaseQty, []),
      returnValueForMissingStub: null);
  @override
  void pop() => super.noSuchMethod(Invocation.method(#pop, []),
      returnValueForMissingStub: null);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i29.SettingsService {
  @override
  _i13.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger())
          as _i13.Logger);
  @override
  bool get enablePrinter =>
      (super.noSuchMethod(Invocation.getter(#enablePrinter), returnValue: false)
          as bool);
  @override
  bool get sendDailReport => (super
          .noSuchMethod(Invocation.getter(#sendDailReport), returnValue: false)
      as bool);
  @override
  _i16.Future<bool> updateSettings({Map<dynamic, dynamic>? map}) =>
      (super.noSuchMethod(Invocation.method(#updateSettings, [], {#map: map}),
          returnValue: Future<bool>.value(false)) as _i16.Future<bool>);
  @override
  Map<String, dynamic> settings() =>
      (super.noSuchMethod(Invocation.method(#settings, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i16.Future<void> enableDailyReport({bool? bool}) => (super.noSuchMethod(
      Invocation.method(#enableDailyReport, [], {#bool: bool}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  bool enabledReport() =>
      (super.noSuchMethod(Invocation.method(#enabledReport, []),
          returnValue: false) as bool);
  @override
  bool enabledPrint() =>
      (super.noSuchMethod(Invocation.method(#enabledPrint, []),
          returnValue: false) as bool);
  @override
  void enablePrint({bool? bool}) =>
      super.noSuchMethod(Invocation.method(#enablePrint, [], {#bool: bool}),
          returnValueForMissingStub: null);
  @override
  void createGoogleSheetDoc() =>
      super.noSuchMethod(Invocation.method(#createGoogleSheetDoc, []),
          returnValueForMissingStub: null);
  @override
  void toggleSettings() =>
      super.noSuchMethod(Invocation.method(#toggleSettings, []),
          returnValueForMissingStub: null);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i30.LocalStorage {
  @override
  dynamic read({String? key}) =>
      super.noSuchMethod(Invocation.method(#read, [], {#key: key}));
  @override
  dynamic remove({String? key}) =>
      super.noSuchMethod(Invocation.method(#remove, [], {#key: key}));
  @override
  bool write({String? key, dynamic value}) => (super.noSuchMethod(
      Invocation.method(#write, [], {#key: key, #value: value}),
      returnValue: false) as bool);
}

/// A class which mocks [AppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppService extends _i1.Mock implements _i31.AppService {
  @override
  _i13.Logger get log =>
      (super.noSuchMethod(Invocation.getter(#log), returnValue: _FakeLogger())
          as _i13.Logger);
  @override
  List<_i19.Category> get categories =>
      (super.noSuchMethod(Invocation.getter(#categories),
          returnValue: <_i19.Category>[]) as List<_i19.Category>);
  @override
  List<_i10.Business> get businesses =>
      (super.noSuchMethod(Invocation.getter(#businesses),
          returnValue: <_i10.Business>[]) as List<_i10.Business>);
  @override
  List<_i20.Unit> get units =>
      (super.noSuchMethod(Invocation.getter(#units), returnValue: <_i20.Unit>[])
          as List<_i20.Unit>);
  @override
  List<_i18.PColor> get colors =>
      (super.noSuchMethod(Invocation.getter(#colors),
          returnValue: <_i18.PColor>[]) as List<_i18.PColor>);
  @override
  String get currentColor =>
      (super.noSuchMethod(Invocation.getter(#currentColor), returnValue: '')
          as String);
  @override
  bool get hasLoggedInUser => (super
          .noSuchMethod(Invocation.getter(#hasLoggedInUser), returnValue: false)
      as bool);
  @override
  List<_i10.Business> get contacts =>
      (super.noSuchMethod(Invocation.getter(#contacts),
          returnValue: <_i10.Business>[]) as List<_i10.Business>);
  @override
  dynamic setCurrentColor({String? color}) => super
      .noSuchMethod(Invocation.method(#setCurrentColor, [], {#color: color}));
  @override
  dynamic setBusiness({List<_i10.Business>? businesses}) => super.noSuchMethod(
      Invocation.method(#setBusiness, [], {#businesses: businesses}));
  @override
  void loadCategories() =>
      super.noSuchMethod(Invocation.method(#loadCategories, []),
          returnValueForMissingStub: null);
  @override
  _i16.Future<void> loadUnits() =>
      (super.noSuchMethod(Invocation.method(#loadUnits, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  _i16.Future<void> loadColors() =>
      (super.noSuchMethod(Invocation.method(#loadColors, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  bool isLoggedIn() => (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
      returnValue: false) as bool);
  @override
  _i16.Future<void> loadContacts() =>
      (super.noSuchMethod(Invocation.method(#loadContacts, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i16.Future<void>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FlipperLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlipperLocation extends _i1.Mock implements _i32.FlipperLocation {
  @override
  _i16.Future<Map<String, String>> getLocation() => (super.noSuchMethod(
          Invocation.method(#getLocation, []),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i16.Future<Map<String, String>>);
  @override
  _i16.Future<bool> doWeHaveLocationPermission() =>
      (super.noSuchMethod(Invocation.method(#doWeHaveLocationPermission, []),
          returnValue: Future<bool>.value(false)) as _i16.Future<bool>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i33.NavigationService {
  @override
  String get previousRoute =>
      (super.noSuchMethod(Invocation.getter(#previousRoute), returnValue: '')
          as String);
  @override
  String get currentRoute =>
      (super.noSuchMethod(Invocation.getter(#currentRoute), returnValue: '')
          as String);
  @override
  _i34.GlobalKey<_i35.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(Invocation.method(#nestedNavigationKey, [index]))
          as _i34.GlobalKey<_i35.NavigatorState>?);
  @override
  void config(
          {bool? enableLog,
          bool? defaultPopGesture,
          bool? defaultOpaqueRoute,
          Duration? defaultDurationTransition,
          bool? defaultGlobalState,
          String? defaultTransition}) =>
      super.noSuchMethod(
          Invocation.method(#config, [], {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransition: defaultTransition
          }),
          returnValueForMissingStub: null);
  @override
  _i16.Future<T?>? navigateWithTransition<T>(_i34.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i36.Curve? curve,
          _i37.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i38.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#navigateWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? replaceWithTransition<T>(_i34.Widget? page,
          {bool? opaque,
          String? transition = r'',
          Duration? duration,
          bool? popGesture,
          int? id,
          _i36.Curve? curve,
          _i37.Bindings? binding,
          bool? fullscreenDialog = false,
          bool? preventDuplicates = true,
          _i38.Transition? transitionClass}) =>
      (super.noSuchMethod(Invocation.method(#replaceWithTransition, [
        page
      ], {
        #opaque: opaque,
        #transition: transition,
        #duration: duration,
        #popGesture: popGesture,
        #id: id,
        #curve: curve,
        #binding: binding,
        #fullscreenDialog: fullscreenDialog,
        #preventDuplicates: preventDuplicates,
        #transitionClass: transitionClass
      })) as _i16.Future<T?>?);
  @override
  bool back<T>({T? result, int? id}) => (super.noSuchMethod(
      Invocation.method(#back, [], {#result: result, #id: id}),
      returnValue: false) as bool);
  @override
  void popUntil(_i35.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void popRepeated(int? popTimes) =>
      super.noSuchMethod(Invocation.method(#popRepeated, [popTimes]),
          returnValueForMissingStub: null);
  @override
  _i16.Future<T?>? navigateTo<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#navigateTo, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? navigateToView<T>(_i34.Widget? view,
          {dynamic arguments,
          int? id,
          bool? opaque,
          _i36.Curve? curve,
          _i37.Bindings? binding,
          Duration? duration,
          bool? fullscreenDialog = false,
          bool? popGesture,
          bool? preventDuplicates = true,
          _i38.Transition? transition}) =>
      (super.noSuchMethod(Invocation.method(#navigateToView, [
        view
      ], {
        #arguments: arguments,
        #id: id,
        #opaque: opaque,
        #curve: curve,
        #binding: binding,
        #duration: duration,
        #fullscreenDialog: fullscreenDialog,
        #popGesture: popGesture,
        #preventDuplicates: preventDuplicates,
        #transition: transition
      })) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? replaceWith<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#replaceWith, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? clearStackAndShow<T>(String? routeName,
          {dynamic arguments, int? id, Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearStackAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #parameters: parameters
      })) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? clearTillFirstAndShow<T>(String? routeName,
          {dynamic arguments,
          int? id,
          bool? preventDuplicates = true,
          Map<String, String>? parameters}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShow, [
        routeName
      ], {
        #arguments: arguments,
        #id: id,
        #preventDuplicates: preventDuplicates,
        #parameters: parameters
      })) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? clearTillFirstAndShowView<T>(_i34.Widget? view,
          {dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#clearTillFirstAndShowView, [view],
          {#arguments: arguments, #id: id})) as _i16.Future<T?>?);
  @override
  _i16.Future<T?>? pushNamedAndRemoveUntil<T>(String? routeName,
          {_i35.RoutePredicate? predicate, dynamic arguments, int? id}) =>
      (super.noSuchMethod(Invocation.method(#pushNamedAndRemoveUntil, [
        routeName
      ], {
        #predicate: predicate,
        #arguments: arguments,
        #id: id
      })) as _i16.Future<T?>?);
}
