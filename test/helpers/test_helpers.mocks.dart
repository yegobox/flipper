// Mocks generated by Mockito 5.0.17 from annotations
// in flipper_rw/test/helpers/test_helpers.dart.
// Do not manually edit this file.

import 'dart:async' as i11;
import 'dart:ui' as i3;

import 'package:firebase_core/firebase_core.dart' as i4;
import 'package:firebase_messaging/firebase_messaging.dart' as i14;
import 'package:firebase_messaging_platform_interface/firebase_messaging_platform_interface.dart'
    as i5;
import 'package:flipper_models/isar_models.dart' as i9;
import 'package:flipper_models/models/models.dart' as i2;
import 'package:flipper_rw/stack.dart' as i7;
import 'package:flipper_services/abstractions/api.dart' as i10;
import 'package:flipper_services/abstractions/location.dart' as i21;
import 'package:flipper_services/abstractions/remote.dart' as i13;
import 'package:flipper_services/abstractions/storage.dart' as i19;
import 'package:flipper_services/app_service.dart' as i20;
import 'package:flipper_services/billing_service.dart' as i22;
import 'package:flipper_services/keypad_service.dart' as i16;
import 'package:flipper_services/language_service.dart' as i12;
import 'package:flipper_services/product_service.dart' as i15;
import 'package:flipper_services/setting_service.dart' as i17;
import 'package:flutter/material.dart' as i18;
import 'package:logger/src/logger.dart' as i6;
import 'package:mockito/mockito.dart' as i1;
import 'package:stacked/stacked.dart' as i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSyncF_0 extends i1.Fake implements i2.SyncF {}

class _FakeStock_1 extends i1.Fake implements i2.Stock {}

class _FakeProductSync_2 extends i1.Fake implements i2.ProductSync {}

class _FakeOrderF_3 extends i1.Fake implements i2.OrderF {}

class _FakeSpenn_4 extends i1.Fake implements i2.Spenn {}

class _FakeBusiness_5 extends i1.Fake implements i2.Business {}

class _FakePoints_6 extends i1.Fake implements i2.Points {}

class _FakeSubscription_7 extends i1.Fake implements i2.Subscription {}

class _FakeLocale_8 extends i1.Fake implements i3.Locale {}

class _FakeFirebaseApp_9 extends i1.Fake implements i4.FirebaseApp {}

class _FakeNotificationSettings_10 extends i1.Fake
    implements i5.NotificationSettings {}

class _FakeLogger_11 extends i1.Fake implements i6.Logger {}

class _FakeStack_12<T> extends i1.Fake implements i7.Stack<T> {}

class _FakeReactiveValue_13<T> extends i1.Fake implements i8.ReactiveValue<T> {}

class _FakeBusiness_14 extends i1.Fake implements i9.Business {}

class _FakePoints_15 extends i1.Fake implements i9.Points {}

class _FakeSubscription_16 extends i1.Fake implements i9.Subscription {}

/// A class which mocks [Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockApi<T> extends i1.Mock implements i10.Api<T> {
  @override
  i11.Stream<List<i2.ProductSync>> products({int? branchId}) => (super
          .noSuchMethod(Invocation.method(#products, [], {#branchId: branchId}),
              returnValue: Stream<List<i2.ProductSync>>.empty())
      as i11.Stream<List<i2.ProductSync>>);
  @override
  i11.Future<List<i2.ProductSync>> productsFuture({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#productsFuture, [], {#branchId: branchId}),
              returnValue:
                  Future<List<i2.ProductSync>>.value(<i2.ProductSync>[]))
          as i11.Future<List<i2.ProductSync>>);
  @override
  i11.Future<int> signup({Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(Invocation.method(#signup, [], {#business: business}),
          returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<i2.SyncF> login({String? userPhone}) => (super.noSuchMethod(
          Invocation.method(#login, [], {#userPhone: userPhone}),
          returnValue: Future<i2.SyncF>.value(_FakeSyncF_0()))
      as i11.Future<i2.SyncF>);
  @override
  i11.Future<List<i2.Business>> getOnlineBusiness({String? userId}) =>
      (super.noSuchMethod(
              Invocation.method(#getOnlineBusiness, [], {#userId: userId}),
              returnValue: Future<List<i2.Business>>.value(<i2.Business>[]))
          as i11.Future<List<i2.Business>>);
  @override
  i11.Future<List<i2.Business>> getLocalOrOnlineBusiness({String? userId}) =>
      (super.noSuchMethod(
          Invocation.method(#getLocalOrOnlineBusiness, [], {#userId: userId}),
          returnValue:
              Future<List<i2.Business>>.value(<i2.Business>[])) as i11
          .Future<List<i2.Business>>);
  @override
  i11.Future<List<i2.Branch>> branches({int? businessId}) =>
      (super.noSuchMethod(
              Invocation.method(#branches, [], {#businessId: businessId}),
              returnValue: Future<List<i2.Branch>>.value(<i2.Branch>[]))
          as i11.Future<List<i2.Branch>>);
  @override
  i11.Future<List<i2.Branch>> getLocalBranches({int? businessId}) => (super
      .noSuchMethod(
          Invocation.method(#getLocalBranches, [], {#businessId: businessId}),
          returnValue: Future<List<i2.Branch>>.value(<i2.Branch>[])) as i11
      .Future<List<i2.Branch>>);
  @override
  List<i2.Stock> stocks({int? productId}) => (super.noSuchMethod(
      Invocation.method(#stocks, [], {#productId: productId}),
      returnValue: <i2.Stock>[]) as List<i2.Stock>);
  @override
  i11.Stream<i2.Stock> stockByVariantIdStream({int? variantId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #stockByVariantIdStream, [], {#variantId: variantId}),
          returnValue: Stream<i2.Stock>.empty()) as i11.Stream<i2.Stock>);
  @override
  i11.Stream<List<i2.ProductSync>> productStreams({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#productStreams, [], {#branchId: branchId}),
              returnValue: Stream<List<i2.ProductSync>>.empty())
          as i11.Stream<List<i2.ProductSync>>);
  @override
  i11.Future<i2.Stock> stockByVariantId({int? variantId}) =>
      (super.noSuchMethod(
              Invocation.method(#stockByVariantId, [], {#variantId: variantId}),
              returnValue: Future<i2.Stock>.value(_FakeStock_1()))
          as i11.Future<i2.Stock>);
  @override
  i11.Future<List<i2.PColor>> colors({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#colors, [], {#branchId: branchId}),
              returnValue: Future<List<i2.PColor>>.value(<i2.PColor>[]))
          as i11.Future<List<i2.PColor>>);
  @override
  i11.Future<List<i2.Category>> categories({int? branchId}) =>
      (super.noSuchMethod(
              Invocation.method(#categories, [], {#branchId: branchId}),
              returnValue: Future<List<i2.Category>>.value(<i2.Category>[]))
          as i11.Future<List<i2.Category>>);
  @override
  i11.Future<List<i2.Unit>> units({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#units, [], {#branchId: branchId}),
              returnValue: Future<List<i2.Unit>>.value(<i2.Unit>[]))
          as i11.Future<List<i2.Unit>>);
  @override
  i11.Future<int> create<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<int> update<T>({Map<dynamic, dynamic>? data, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [], {#data: data, #endPoint: endPoint}),
          returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<bool> delete({dynamic id, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {#id: id, #endPoint: endPoint}),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  i11.Future<i2.PColor?> getColor({int? id, String? endPoint}) =>
      (super.noSuchMethod(
          Invocation.method(#getColor, [], {#id: id, #endPoint: endPoint}),
          returnValue: Future<i2.PColor?>.value()) as i11.Future<i2.PColor?>);
  @override
  i11.Future<i2.Stock?> getStock({int? branchId, int? variantId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getStock, [], {#branchId: branchId, #variantId: variantId}),
          returnValue: Future<i2.Stock?>.value()) as i11.Future<i2.Stock?>);
  @override
  i11.Future<List<i2.Variant>> variants({int? branchId, int? productId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #variants, [], {#branchId: branchId, #productId: productId}),
              returnValue: Future<List<i2.Variant>>.value(<i2.Variant>[]))
          as i11.Future<List<i2.Variant>>);
  @override
  i11.Future<i2.Variant?> variant({int? variantId}) => (super.noSuchMethod(
      Invocation.method(#variant, [], {#variantId: variantId}),
      returnValue: Future<i2.Variant?>.value()) as i11.Future<i2.Variant?>);
  @override
  i11.Future<int> addUnits({Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(Invocation.method(#addUnits, [], {#data: data}),
          returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<int> addVariant(
          {List<i2.Variant>? data, double? retailPrice, double? supplyPrice}) =>
      (super.noSuchMethod(
          Invocation.method(#addVariant, [], {
            #data: data,
            #retailPrice: retailPrice,
            #supplyPrice: supplyPrice
          }),
          returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<i2.ProductSync?> getProduct({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getProduct, [], {#id: id}),
              returnValue: Future<i2.ProductSync?>.value())
          as i11.Future<i2.ProductSync?>);
  @override
  i11.Future<i2.ProductSync?> getProductByBarCode({String? barCode}) =>
      (super.noSuchMethod(
              Invocation.method(#getProductByBarCode, [], {#barCode: barCode}),
              returnValue: Future<i2.ProductSync?>.value())
          as i11.Future<i2.ProductSync?>);
  @override
  i11.Future<i2.ProductSync> createProduct({i2.ProductSync? product}) =>
      (super.noSuchMethod(
              Invocation.method(#createProduct, [], {#product: product}),
              returnValue: Future<i2.ProductSync>.value(_FakeProductSync_2()))
          as i11.Future<i2.ProductSync>);
  @override
  i2.ProductSync? isTempProductExist({int? branchId}) => (super.noSuchMethod(
          Invocation.method(#isTempProductExist, [], {#branchId: branchId}))
      as i2.ProductSync?);
  @override
  i11.Future<bool> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  i11.Future<i2.Voucher?> consumeVoucher({int? voucherCode}) =>
      (super.noSuchMethod(
          Invocation.method(#consumeVoucher, [], {#voucherCode: voucherCode}),
          returnValue: Future<i2.Voucher?>.value()) as i11.Future<i2.Voucher?>);
  @override
  i11.Future<i2.OrderF> createOrder(
          {double? customAmount,
          i2.Variant? variation,
          double? price,
          bool? useProductName = false,
          String? orderType = r'custom',
          double? quantity = 1.0}) =>
      (super.noSuchMethod(
              Invocation.method(#createOrder, [], {
                #customAmount: customAmount,
                #variation: variation,
                #price: price,
                #useProductName: useProductName,
                #orderType: orderType,
                #quantity: quantity
              }),
              returnValue: Future<i2.OrderF>.value(_FakeOrderF_3()))
          as i11.Future<i2.OrderF>);
  @override
  i11.Future<List<i2.OrderF>> orders({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#orders, [], {#branchId: branchId}),
              returnValue: Future<List<i2.OrderF>>.value(<i2.OrderF>[]))
          as i11.Future<List<i2.OrderF>>);
  @override
  i11.Future<i2.OrderF?> order({int? branchId}) =>
      (super.noSuchMethod(Invocation.method(#order, [], {#branchId: branchId}),
          returnValue: Future<i2.OrderF?>.value()) as i11.Future<i2.OrderF?>);
  @override
  i11.Future<i2.OrderItem?> getOrderItem({int? id}) => (super.noSuchMethod(
      Invocation.method(#getOrderItem, [], {#id: id}),
      returnValue: Future<i2.OrderItem?>.value()) as i11.Future<i2.OrderItem?>);
  @override
  i11.Future<i2.Variant?> getCustomProductVariant() =>
      (super.noSuchMethod(Invocation.method(#getCustomProductVariant, []),
          returnValue: Future<i2.Variant?>.value()) as i11.Future<i2.Variant?>);
  @override
  i11.Future<i2.Spenn> spennPayment({double? amount, dynamic phoneNumber}) =>
      (super.noSuchMethod(
          Invocation.method(
              #spennPayment, [], {#amount: amount, #phoneNumber: phoneNumber}),
          returnValue:
              Future<i2.Spenn>.value(_FakeSpenn_4())) as i11.Future<i2.Spenn>);
  @override
  i11.Future<void> collectCashPayment(
          {double? cashReceived, i2.OrderF? order}) =>
      (super.noSuchMethod(
          Invocation.method(#collectCashPayment, [],
              {#cashReceived: cashReceived, #order: order}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i2.Setting? getSetting({int? userId}) =>
      (super.noSuchMethod(Invocation.method(#getSetting, [], {#userId: userId}))
          as i2.Setting?);
  @override
  i11.Future<i2.Setting?> createSetting({i2.Setting? setting}) => (super
      .noSuchMethod(Invocation.method(#createSetting, [], {#setting: setting}),
          returnValue: Future<i2.Setting?>.value()) as i11.Future<i2.Setting?>);
  @override
  void sendMessage({int? receiverId, i2.Message? message}) =>
      super.noSuchMethod(
          Invocation.method(
              #sendMessage, [], {#receiverId: receiverId, #message: message}),
          returnValueForMissingStub: null);
  @override
  i11.Stream<List<i2.Message>> messages({int? conversationId}) => (super
      .noSuchMethod(
          Invocation.method(#messages, [], {#conversationId: conversationId}),
          returnValue: Stream<List<i2.Message>>.empty()) as i11
      .Stream<List<i2.Message>>);
  @override
  i11.Stream<List<i2.Business>> users() =>
      (super.noSuchMethod(Invocation.method(#users, []),
              returnValue: Stream<List<i2.Business>>.empty())
          as i11.Stream<List<i2.Business>>);
  @override
  i11.Stream<List<i2.Business>> contacts() =>
      (super.noSuchMethod(Invocation.method(#contacts, []),
              returnValue: Stream<List<i2.Business>>.empty())
          as i11.Stream<List<i2.Business>>);
  @override
  i11.Future<List<i2.Business>> getContacts() =>
      (super.noSuchMethod(Invocation.method(#getContacts, []),
              returnValue: Future<List<i2.Business>>.value(<i2.Business>[]))
          as i11.Future<List<i2.Business>>);
  @override
  i2.CustomerSync? addCustomer(
          {Map<dynamic, dynamic>? customer, int? orderId}) =>
      (super.noSuchMethod(Invocation.method(
              #addCustomer, [], {#customer: customer, #orderId: orderId}))
          as i2.CustomerSync?);
  @override
  i11.Future<dynamic> assingOrderToCustomer({int? customerId, int? orderId}) =>
      (super.noSuchMethod(
          Invocation.method(#assingOrderToCustomer, [],
              {#customerId: customerId, #orderId: orderId}),
          returnValue: Future<dynamic>.value()) as i11.Future<dynamic>);
  @override
  i11.Stream<i2.CustomerSync?> getCustomer({String? key}) =>
      (super.noSuchMethod(Invocation.method(#getCustomer, [], {#key: key}),
              returnValue: Stream<i2.CustomerSync?>.empty())
          as i11.Stream<i2.CustomerSync?>);
  @override
  i11.Stream<i2.CustomerSync?> getCustomerByOrderId({int? id}) => (super
          .noSuchMethod(Invocation.method(#getCustomerByOrderId, [], {#id: id}),
              returnValue: Stream<i2.CustomerSync?>.empty())
      as i11.Stream<i2.CustomerSync?>);
  @override
  i11.Future<i2.OrderF> getOrderById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderById, [], {#id: id}),
              returnValue: Future<i2.OrderF>.value(_FakeOrderF_3()))
          as i11.Future<i2.OrderF>);
  @override
  i11.Future<List<i2.OrderF>> tickets() =>
      (super.noSuchMethod(Invocation.method(#tickets, []),
              returnValue: Future<List<i2.OrderF>>.value(<i2.OrderF>[]))
          as i11.Future<List<i2.OrderF>>);
  @override
  List<i2.Variant> getVariantByProductId({int? productId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getVariantByProductId, [], {#productId: productId}),
          returnValue: <i2.Variant>[]) as List<i2.Variant>);
  @override
  i11.Future<List<i2.OrderF>> getOrderByStatus({String? status}) =>
      (super.noSuchMethod(
              Invocation.method(#getOrderByStatus, [], {#status: status}),
              returnValue: Future<List<i2.OrderF>>.value(<i2.OrderF>[]))
          as i11.Future<List<i2.OrderF>>);
  @override
  i11.Future<int> sendReport({List<i2.OrderItem>? orderItems}) =>
      (super.noSuchMethod(
          Invocation.method(#sendReport, [], {#orderItems: orderItems}),
          returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<void> createGoogleSheetDoc({String? email}) => (super.noSuchMethod(
      Invocation.method(#createGoogleSheetDoc, [], {#email: email}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i2.Business getBusinessById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getBusinessById, [], {#id: id}),
          returnValue: _FakeBusiness_5()) as i2.Business);
  @override
  i2.OrderItem? getOrderItemByVariantId({int? variantId, int? orderId}) =>
      (super.noSuchMethod(Invocation.method(#getOrderItemByVariantId, [],
          {#variantId: variantId, #orderId: orderId})) as i2.OrderItem?);
  @override
  i11.Future<void> updateBusiness({int? id, Map<dynamic, dynamic>? business}) =>
      (super.noSuchMethod(
          Invocation.method(
              #updateBusiness, [], {#id: id, #business: business}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  int lifeTimeCustomersForbranch({int? branchId}) => (super.noSuchMethod(
      Invocation.method(#lifeTimeCustomersForbranch, [], {#branchId: branchId}),
      returnValue: 0) as int);
  @override
  List<i2.OrderF> weeklyOrdersReport(
          {DateTime? weekStartDate, DateTime? weekEndDate, int? branchId}) =>
      (super.noSuchMethod(
          Invocation.method(#weeklyOrdersReport, [], {
            #weekStartDate: weekStartDate,
            #weekEndDate: weekEndDate,
            #branchId: branchId
          }),
          returnValue: <i2.OrderF>[]) as List<i2.OrderF>);
  @override
  i11.Future<void> saveDiscount(
          {int? branchId, dynamic name, double? amount}) =>
      (super.noSuchMethod(
          Invocation.method(#saveDiscount, [],
              {#branchId: branchId, #name: name, #amount: amount}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<List<i2.DiscountSync>> getDiscounts({int? branchId}) => (super
      .noSuchMethod(Invocation.method(#getDiscounts, [], {#branchId: branchId}),
          returnValue:
              Future<List<i2.DiscountSync>>.value(<i2.DiscountSync>[])) as i11
      .Future<List<i2.DiscountSync>>);
  @override
  i2.OrderF addOrderItem({i2.OrderF? order, Map<dynamic, dynamic>? data}) =>
      (super.noSuchMethod(
          Invocation.method(#addOrderItem, [], {#order: order, #data: data}),
          returnValue: _FakeOrderF_3()) as i2.OrderF);
  @override
  void emptySentMessageQueue() =>
      super.noSuchMethod(Invocation.method(#emptySentMessageQueue, []),
          returnValueForMissingStub: null);
  @override
  bool suggestRestore() =>
      (super.noSuchMethod(Invocation.method(#suggestRestore, []),
          returnValue: false) as bool);
  @override
  i11.Future<int> userNameAvailable({String? name}) => (super.noSuchMethod(
      Invocation.method(#userNameAvailable, [], {#name: name}),
      returnValue: Future<int>.value(0)) as i11.Future<int>);
  @override
  i11.Future<i2.TenantSync?> isTenant({String? phoneNumber}) => (super
          .noSuchMethod(
              Invocation.method(#isTenant, [], {#phoneNumber: phoneNumber}),
              returnValue: Future<i2.TenantSync?>.value())
      as i11.Future<i2.TenantSync?>);
  @override
  i11.Future<i2.Business> getBusinessFromOnlineGivenId({int? id}) =>
      (super.noSuchMethod(
              Invocation.method(#getBusinessFromOnlineGivenId, [], {#id: id}),
              returnValue: Future<i2.Business>.value(_FakeBusiness_5()))
          as i11.Future<i2.Business>);
  @override
  i11.Future<void> syncProduct(
          {i2.ProductSync? product, i2.Variant? variant, i2.Stock? stock}) =>
      (super.noSuchMethod(
          Invocation.method(#syncProduct, [],
              {#product: product, #variant: variant, #stock: stock}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  void migrateToSync() =>
      super.noSuchMethod(Invocation.method(#migrateToSync, []),
          returnValueForMissingStub: null);
  @override
  bool isSubscribed({String? feature, int? businessId}) => (super.noSuchMethod(
      Invocation.method(
          #isSubscribed, [], {#feature: feature, #businessId: businessId}),
      returnValue: false) as bool);
  @override
  bool subscribe({String? feature, int? businessId, int? agentCode}) =>
      (super.noSuchMethod(
          Invocation.method(#subscribe, [], {
            #feature: feature,
            #businessId: businessId,
            #agentCode: agentCode
          }),
          returnValue: false) as bool);
  @override
  i11.Future<bool> checkIn({String? checkInCode}) => (super.noSuchMethod(
      Invocation.method(#checkIn, [], {#checkInCode: checkInCode}),
      returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  i11.Future<bool> enableAttendance({int? businessId, String? email}) =>
      (super.noSuchMethod(
          Invocation.method(
              #enableAttendance, [], {#businessId: businessId, #email: email}),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  i2.Profile? profile({int? businessId}) => (super.noSuchMethod(
          Invocation.method(#profile, [], {#businessId: businessId}))
      as i2.Profile?);
  @override
  i2.Profile? updateProfile({i2.Profile? profile}) => (super.noSuchMethod(
          Invocation.method(#updateProfile, [], {#profile: profile}))
      as i2.Profile?);
  @override
  void saveTenant({String? phoneNumber}) => super.noSuchMethod(
      Invocation.method(#saveTenant, [], {#phoneNumber: phoneNumber}),
      returnValueForMissingStub: null);
  @override
  i2.Points addPoint({int? userId, int? point}) => (super.noSuchMethod(
      Invocation.method(#addPoint, [], {#userId: userId, #point: point}),
      returnValue: _FakePoints_6()) as i2.Points);
  @override
  i11.Future<i2.Subscription> addUpdateSubscription(
          {int? userId,
          int? interval,
          double? recurringAmount,
          String? descriptor,
          List<i2.Feature>? features}) =>
      (super.noSuchMethod(
              Invocation.method(#addUpdateSubscription, [], {
                #userId: userId,
                #interval: interval,
                #recurringAmount: recurringAmount,
                #descriptor: descriptor,
                #features: features
              }),
              returnValue: Future<i2.Subscription>.value(_FakeSubscription_7()))
          as i11.Future<i2.Subscription>);
  @override
  i11.Future<i2.Subscription?> getSubscription({int? userId}) =>
      (super.noSuchMethod(
              Invocation.method(#getSubscription, [], {#userId: userId}),
              returnValue: Future<i2.Subscription?>.value())
          as i11.Future<i2.Subscription?>);
  @override
  i2.Points? getPoints({int? userId}) =>
      (super.noSuchMethod(Invocation.method(#getPoints, [], {#userId: userId}))
          as i2.Points?);
  @override
  void consumePoints({int? userId, int? points}) => super.noSuchMethod(
      Invocation.method(#consumePoints, [], {#userId: userId, #points: points}),
      returnValueForMissingStub: null);
  @override
  i11.Future<i2.Pin?> createPin() =>
      (super.noSuchMethod(Invocation.method(#createPin, []),
          returnValue: Future<i2.Pin?>.value()) as i11.Future<i2.Pin?>);
  @override
  i11.Future<i2.Pin?> getPin({String? pin}) =>
      (super.noSuchMethod(Invocation.method(#getPin, [], {#pin: pin}),
          returnValue: Future<i2.Pin?>.value()) as i11.Future<i2.Pin?>);
}

/// A class which mocks [Language].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguage extends i1.Mock implements i12.Language {
  @override
  void setLocale({String? lang}) =>
      super.noSuchMethod(Invocation.method(#setLocale, [], {#lang: lang}),
          returnValueForMissingStub: null);
}

/// A class which mocks [LanguageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLanguageService extends i1.Mock implements i12.LanguageService {
  @override
  i3.Locale get locale => (super.noSuchMethod(Invocation.getter(#locale),
      returnValue: _FakeLocale_8()) as i3.Locale);
  @override
  void setLocale({String? lang}) =>
      super.noSuchMethod(Invocation.method(#setLocale, [], {#lang: lang}),
          returnValueForMissingStub: null);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [Remote].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemote extends i1.Mock implements i13.Remote {
  @override
  void setDefault() => super.noSuchMethod(Invocation.method(#setDefault, []),
      returnValueForMissingStub: null);
  @override
  void fetch() => super.noSuchMethod(Invocation.method(#fetch, []),
      returnValueForMissingStub: null);
  @override
  bool isChatAvailable() =>
      (super.noSuchMethod(Invocation.method(#isChatAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSpennPaymentAvailable() =>
      (super.noSuchMethod(Invocation.method(#isSpennPaymentAvailable, []),
          returnValue: false) as bool);
  @override
  bool isReceiptOnEmail() =>
      (super.noSuchMethod(Invocation.method(#isReceiptOnEmail, []),
          returnValue: false) as bool);
  @override
  bool isAddCustomerToSaleAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAddCustomerToSaleAvailable, []),
          returnValue: false) as bool);
  @override
  bool isPrinterAvailable() =>
      (super.noSuchMethod(Invocation.method(#isPrinterAvailable, []),
          returnValue: false) as bool);
  @override
  bool forceDateEntry() =>
      (super.noSuchMethod(Invocation.method(#forceDateEntry, []),
          returnValue: false) as bool);
  @override
  bool isAnalyticFeatureAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAnalyticFeatureAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSubmitDeviceTokenEnabled() =>
      (super.noSuchMethod(Invocation.method(#isSubmitDeviceTokenEnabled, []),
          returnValue: false) as bool);
  @override
  bool scannSelling() =>
      (super.noSuchMethod(Invocation.method(#scannSelling, []),
          returnValue: false) as bool);
  @override
  void config() => super.noSuchMethod(Invocation.method(#config, []),
      returnValueForMissingStub: null);
  @override
  bool isMenuAvailable() =>
      (super.noSuchMethod(Invocation.method(#isMenuAvailable, []),
          returnValue: false) as bool);
  @override
  bool isDiscountAvailable() =>
      (super.noSuchMethod(Invocation.method(#isDiscountAvailable, []),
          returnValue: false) as bool);
  @override
  bool isOrderAvailable() =>
      (super.noSuchMethod(Invocation.method(#isOrderAvailable, []),
          returnValue: false) as bool);
  @override
  bool isBackupAvailable() =>
      (super.noSuchMethod(Invocation.method(#isBackupAvailable, []),
          returnValue: false) as bool);
  @override
  bool isRemoteLoggingDynamicLinkEnabled() => (super.noSuchMethod(
      Invocation.method(#isRemoteLoggingDynamicLinkEnabled, []),
      returnValue: false) as bool);
  @override
  bool isAccessiblityFeatureAvailable() => (super.noSuchMethod(
      Invocation.method(#isAccessiblityFeatureAvailable, []),
      returnValue: false) as bool);
  @override
  bool isMapAvailable() =>
      (super.noSuchMethod(Invocation.method(#isMapAvailable, []),
          returnValue: false) as bool);
  @override
  bool isAInvitingMembersAvailable() =>
      (super.noSuchMethod(Invocation.method(#isAInvitingMembersAvailable, []),
          returnValue: false) as bool);
  @override
  bool isSyncAvailable() =>
      (super.noSuchMethod(Invocation.method(#isSyncAvailable, []),
          returnValue: false) as bool);
  @override
  bool isGoogleLoginAvailable() =>
      (super.noSuchMethod(Invocation.method(#isGoogleLoginAvailable, []),
          returnValue: false) as bool);
  @override
  bool isTwitterLoginAvailable() =>
      (super.noSuchMethod(Invocation.method(#isTwitterLoginAvailable, []),
          returnValue: false) as bool);
  @override
  bool isFacebookLoginAvailable() =>
      (super.noSuchMethod(Invocation.method(#isFacebookLoginAvailable, []),
          returnValue: false) as bool);
  @override
  bool isResetSettingEnabled() =>
      (super.noSuchMethod(Invocation.method(#isResetSettingEnabled, []),
          returnValue: false) as bool);
  @override
  bool isLinkedDeviceAvailable() =>
      (super.noSuchMethod(Invocation.method(#isLinkedDeviceAvailable, []),
          returnValue: false) as bool);
  @override
  String supportLine() =>
      (super.noSuchMethod(Invocation.method(#supportLine, []), returnValue: '')
          as String);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends i1.Mock implements i14.FirebaseMessaging {
  @override
  i4.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_9()) as i4.FirebaseApp);
  @override
  set app(i4.FirebaseApp? app) =>
      super.noSuchMethod(Invocation.setter(#app, app),
          returnValueForMissingStub: null);
  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoInitEnabled),
          returnValue: false) as bool);
  @override
  i11.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(Invocation.getter(#onTokenRefresh),
          returnValue: Stream<String>.empty()) as i11.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  i11.Future<i5.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future<i5.RemoteMessage?>.value())
          as i11.Future<i5.RemoteMessage?>);
  @override
  i11.Future<void> deleteToken() =>
      (super.noSuchMethod(Invocation.method(#deleteToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(Invocation.method(#getAPNSToken, []),
          returnValue: Future<String?>.value()) as i11.Future<String?>);
  @override
  i11.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
      Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
      returnValue: Future<String?>.value()) as i11.Future<String?>);
  @override
  bool isSupported() => (super.noSuchMethod(Invocation.method(#isSupported, []),
      returnValue: false) as bool);
  @override
  i11.Future<i5.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(Invocation.method(#getNotificationSettings, []),
              returnValue: Future<i5.NotificationSettings>.value(
                  _FakeNotificationSettings_10()))
          as i11.Future<i5.NotificationSettings>);
  @override
  i11.Future<i5.NotificationSettings> requestPermission(
          {bool? alert = true,
          bool? announcement = false,
          bool? badge = true,
          bool? carPlay = false,
          bool? criticalAlert = false,
          bool? provisional = false,
          bool? sound = true}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [], {
                #alert: alert,
                #announcement: announcement,
                #badge: badge,
                #carPlay: carPlay,
                #criticalAlert: criticalAlert,
                #provisional: provisional,
                #sound: sound
              }),
              returnValue: Future<i5.NotificationSettings>.value(
                  _FakeNotificationSettings_10()))
          as i11.Future<i5.NotificationSettings>);
  @override
  i11.Future<void> sendMessage(
          {String? to,
          Map<String, String>? data,
          String? collapseKey,
          String? messageId,
          String? messageType,
          int? ttl}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [], {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<void> setAutoInitEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setAutoInitEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<void> setForegroundNotificationPresentationOptions(
          {bool? alert = false, bool? badge = false, bool? sound = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setForegroundNotificationPresentationOptions, [],
              {#alert: alert, #badge: badge, #sound: sound}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#subscribeToTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#unsubscribeFromTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends i1.Mock implements i15.ProductService {
  @override
  i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as i6.Logger);
  @override
  String get barCode =>
      (super.noSuchMethod(Invocation.getter(#barCode), returnValue: '')
          as String);
  @override
  List<i9.Discount> get discounts =>
      (super.noSuchMethod(Invocation.getter(#discounts),
          returnValue: <i9.Discount>[]) as List<i9.Discount>);
  @override
  List<i9.Product> get products =>
      (super.noSuchMethod(Invocation.getter(#products),
          returnValue: <i9.Product>[]) as List<i9.Product>);
  @override
  set products(List<i9.Product>? value) =>
      super.noSuchMethod(Invocation.setter(#products, value),
          returnValueForMissingStub: null);
  @override
  List<i9.Stock?> get stocks => (super.noSuchMethod(Invocation.getter(#stocks),
      returnValue: <i9.Stock?>[]) as List<i9.Stock?>);
  @override
  void setBarcode(String? value) =>
      super.noSuchMethod(Invocation.method(#setBarcode, [value]),
          returnValueForMissingStub: null);
  @override
  dynamic setProductUnit({String? unit}) =>
      super.noSuchMethod(Invocation.method(#setProductUnit, [], {#unit: unit}));
  @override
  dynamic setCurrentProduct({i9.Product? product}) => super.noSuchMethod(
      Invocation.method(#setCurrentProduct, [], {#product: product}));
  @override
  i11.Future<void> variantsProduct({int? productId}) => (super.noSuchMethod(
      Invocation.method(#variantsProduct, [], {#productId: productId}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Stream<List<i9.Product>> loadProducts({int? branchId}) => (super
      .noSuchMethod(Invocation.method(#loadProducts, [], {#branchId: branchId}),
          returnValue: Stream<List<i9.Product>>.empty()) as i11
      .Stream<List<i9.Product>>);
  @override
  i11.Future<void> filtterProduct({String? searchKey, int? branchId}) =>
      (super.noSuchMethod(
          Invocation.method(#filtterProduct, [],
              {#searchKey: searchKey, #branchId: branchId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<i9.Product?> getProductByBarCode({String? code}) => (super
      .noSuchMethod(Invocation.method(#getProductByBarCode, [], {#code: code}),
          returnValue: Future<i9.Product?>.value()) as i11.Future<i9.Product?>);
  @override
  i11.Future<List<i9.Stock?>> loadStockByProductId({int? productId}) => (super
      .noSuchMethod(
          Invocation.method(#loadStockByProductId, [], {#productId: productId}),
          returnValue: Future<List<i9.Stock?>>.value(<i9.Stock?>[])) as i11
      .Future<List<i9.Stock?>>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [KeyPadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyPadService extends i1.Mock implements i16.KeyPadService {
  @override
  i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as i6.Logger);
  @override
  i7.Stack<dynamic> get stack => (super.noSuchMethod(Invocation.getter(#stack),
      returnValue: _FakeStack_12<dynamic>()) as i7.Stack<dynamic>);
  @override
  set stack(i7.Stack<dynamic>? stack) =>
      super.noSuchMethod(Invocation.setter(#stack, stack),
          returnValueForMissingStub: null);
  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  int get countOrderItems =>
      (super.noSuchMethod(Invocation.getter(#countOrderItems), returnValue: 0)
          as int);
  @override
  double get amountTotal =>
      (super.noSuchMethod(Invocation.getter(#amountTotal), returnValue: 0.0)
          as double);
  @override
  int get check =>
      (super.noSuchMethod(Invocation.getter(#check), returnValue: 0) as int);
  @override
  List<i9.Order> get tickets => (super.noSuchMethod(Invocation.getter(#tickets),
      returnValue: <i9.Order>[]) as List<i9.Order>);
  @override
  double get totalPayable =>
      (super.noSuchMethod(Invocation.getter(#totalPayable), returnValue: 0.0)
          as double);
  @override
  double get totalDiscount =>
      (super.noSuchMethod(Invocation.getter(#totalDiscount), returnValue: 0.0)
          as double);
  @override
  void addKey(String? key) =>
      super.noSuchMethod(Invocation.method(#addKey, [key]),
          returnValueForMissingStub: null);
  @override
  dynamic setAmount({double? amount}) =>
      super.noSuchMethod(Invocation.method(#setAmount, [], {#amount: amount}));
  @override
  dynamic setCashReceived({double? amount}) => super
      .noSuchMethod(Invocation.method(#setCashReceived, [], {#amount: amount}));
  @override
  void toggleCheckbox({int? variantId}) => super.noSuchMethod(
      Invocation.method(#toggleCheckbox, [], {#variantId: variantId}),
      returnValueForMissingStub: null);
  @override
  dynamic setItemsOnSale({int? count}) =>
      super.noSuchMethod(Invocation.method(#setCount, [], {#count: count}));
  @override
  i11.Future<List<i9.Order>> getTickets() =>
      (super.noSuchMethod(Invocation.method(#getTickets, []),
              returnValue: Future<List<i9.Order>>.value(<i9.Order>[]))
          as i11.Future<List<i9.Order>>);
  @override
  void setTotalPayable({double? amount}) => super.noSuchMethod(
      Invocation.method(#setTotalPayable, [], {#amount: amount}),
      returnValueForMissingStub: null);
  @override
  void setTotalDiscount({double? amount}) => super.noSuchMethod(
      Invocation.method(#setTotalDiscount, [], {#amount: amount}),
      returnValueForMissingStub: null);
  @override
  void setOrder(i9.Order? order) =>
      super.noSuchMethod(Invocation.method(#setOrder, [order]),
          returnValueForMissingStub: null);
  @override
  i11.Future<i9.Order?> getOrder({int? branchId}) => (super.noSuchMethod(
      Invocation.method(#getOrder, [], {#branchId: branchId}),
      returnValue: Future<i9.Order?>.value()) as i11.Future<i9.Order?>);
  @override
  i11.Future<i9.Order?> getOrderById({int? id}) =>
      (super.noSuchMethod(Invocation.method(#getOrderById, [], {#id: id}),
          returnValue: Future<i9.Order?>.value()) as i11.Future<i9.Order?>);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
  @override
  void customQtyIncrease({int? qty}) =>
      super.noSuchMethod(Invocation.method(#customQtyIncrease, [], {#qty: qty}),
          returnValueForMissingStub: null);
  @override
  void increaseQty() => super.noSuchMethod(Invocation.method(#increaseQty, []),
      returnValueForMissingStub: null);
  @override
  void decreaseQty() => super.noSuchMethod(Invocation.method(#decreaseQty, []),
      returnValueForMissingStub: null);
  @override
  void pop() => super.noSuchMethod(Invocation.method(#pop, []),
      returnValueForMissingStub: null);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends i1.Mock implements i17.SettingsService {
  @override
  i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as i6.Logger);
  @override
  i8.ReactiveValue<i18.ThemeMode> get themeMode =>
      (super.noSuchMethod(Invocation.getter(#themeMode),
              returnValue: _FakeReactiveValue_13<i18.ThemeMode>())
          as i8.ReactiveValue<i18.ThemeMode>);
  @override
  bool get enablePrinter =>
      (super.noSuchMethod(Invocation.getter(#enablePrinter), returnValue: false)
          as bool);
  @override
  bool get sendDailReport => (super
          .noSuchMethod(Invocation.getter(#sendDailReport), returnValue: false)
      as bool);
  @override
  bool get isAttendanceEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAttendanceEnabled),
          returnValue: false) as bool);
  @override
  void setThemeMode(i18.ThemeMode? mode) =>
      super.noSuchMethod(Invocation.method(#setThemeMode, [mode]),
          returnValueForMissingStub: null);
  @override
  i11.Future<bool> updateSettings({Map<dynamic, dynamic>? map}) =>
      (super.noSuchMethod(Invocation.method(#updateSettings, [], {#map: map}),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  i11.Future<i9.Setting?> settings() =>
      (super.noSuchMethod(Invocation.method(#settings, []),
          returnValue: Future<i9.Setting?>.value()) as i11.Future<i9.Setting?>);
  @override
  i11.Future<bool> isDailyReportEnabled() =>
      (super.noSuchMethod(Invocation.method(#isDailyReportEnabled, []),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  i11.Future<bool> enabledPrint() =>
      (super.noSuchMethod(Invocation.method(#enabledPrint, []),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  void enablePrint({bool? bool}) =>
      super.noSuchMethod(Invocation.method(#enablePrint, [], {#bool: bool}),
          returnValueForMissingStub: null);
  @override
  void getEnableReportToggleState() =>
      super.noSuchMethod(Invocation.method(#getEnableReportToggleState, []),
          returnValueForMissingStub: null);
  @override
  void getEnableAttendanceToggleState() =>
      super.noSuchMethod(Invocation.method(#getEnableAttendanceToggleState, []),
          returnValueForMissingStub: null);
  @override
  void toggleAttendanceSetting() =>
      super.noSuchMethod(Invocation.method(#toggleAttendanceSetting, []),
          returnValueForMissingStub: null);
  @override
  void toggleDailyReportSetting() =>
      super.noSuchMethod(Invocation.method(#toggleDailyReportSetting, []),
          returnValueForMissingStub: null);
  @override
  i11.Future<Function?> enableAttendance({bool? bool, Function? callback}) =>
      (super.noSuchMethod(
          Invocation.method(
              #enableAttendance, [], {#bool: bool, #callback: callback}),
          returnValue: Future<Function?>.value()) as i11.Future<Function?>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends i1.Mock implements i19.LocalStorage {
  @override
  dynamic read({String? key}) =>
      super.noSuchMethod(Invocation.method(#read, [], {#key: key}));
  @override
  dynamic remove({String? key}) =>
      super.noSuchMethod(Invocation.method(#remove, [], {#key: key}));
  @override
  bool write({String? key, dynamic value}) => (super.noSuchMethod(
      Invocation.method(#write, [], {#key: key, #value: value}),
      returnValue: false) as bool);
  @override
  bool getNeedAccountLinkWithPhone() =>
      (super.noSuchMethod(Invocation.method(#getNeedAccountLinkWithPhone, []),
          returnValue: false) as bool);
}

/// A class which mocks [AppService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppService extends i1.Mock implements i20.AppService {
  @override
  i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as i6.Logger);
  @override
  List<i9.Category> get categories =>
      (super.noSuchMethod(Invocation.getter(#categories),
          returnValue: <i9.Category>[]) as List<i9.Category>);
  @override
  i9.Business get business => (super.noSuchMethod(Invocation.getter(#business),
      returnValue: _FakeBusiness_14()) as i9.Business);
  @override
  List<i9.Unit> get units =>
      (super.noSuchMethod(Invocation.getter(#units), returnValue: <i9.Unit>[])
          as List<i9.Unit>);
  @override
  List<i9.PColor> get colors => (super.noSuchMethod(Invocation.getter(#colors),
      returnValue: <i9.PColor>[]) as List<i9.PColor>);
  @override
  String get currentColor =>
      (super.noSuchMethod(Invocation.getter(#currentColor), returnValue: '')
          as String);
  @override
  bool get hasLoggedInUser => (super
          .noSuchMethod(Invocation.getter(#hasLoggedInUser), returnValue: false)
      as bool);
  @override
  List<i9.Business> get contacts =>
      (super.noSuchMethod(Invocation.getter(#contacts),
          returnValue: <i9.Business>[]) as List<i9.Business>);
  @override
  dynamic setCurrentColor({String? color}) => super
      .noSuchMethod(Invocation.method(#setCurrentColor, [], {#color: color}));
  @override
  dynamic setBusiness({i9.Business? business}) => super
      .noSuchMethod(Invocation.method(#setBusiness, [], {#business: business}));
  @override
  void loadCategories() =>
      super.noSuchMethod(Invocation.method(#loadCategories, []),
          returnValueForMissingStub: null);
  @override
  i11.Future<void> loadUnits() =>
      (super.noSuchMethod(Invocation.method(#loadUnits, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  i11.Future<void> loadColors() =>
      (super.noSuchMethod(Invocation.method(#loadColors, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  bool isLoggedIn() => (super.noSuchMethod(Invocation.method(#isLoggedIn, []),
      returnValue: false) as bool);
  @override
  i11.Future<void> loadContacts() =>
      (super.noSuchMethod(Invocation.method(#loadContacts, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i11.Future<void>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
          Invocation.method(#listenToReactiveValues, [reactiveValues]),
          returnValueForMissingStub: null);
  @override
  void addListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(void Function()? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FlipperLocation].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlipperLocation extends i1.Mock implements i21.FlipperLocation {
  @override
  i11.Future<Map<String, String>> getLocation() => (super.noSuchMethod(
          Invocation.method(#getLocation, []),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as i11.Future<Map<String, String>>);
  @override
  i11.Future<bool> doWeHaveLocationPermission() =>
      (super.noSuchMethod(Invocation.method(#doWeHaveLocationPermission, []),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
}

/// A class which mocks [BillingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBillingService extends i1.Mock implements i22.BillingService {
  @override
  i6.Logger get log => (super.noSuchMethod(Invocation.getter(#log),
      returnValue: _FakeLogger_11()) as i6.Logger);
  @override
  i11.Future<i9.Voucher?> useVoucher({int? voucher, int? userId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #useVoucher, [], {#voucher: voucher, #userId: userId}),
          returnValue: Future<i9.Voucher?>.value()) as i11.Future<i9.Voucher?>);
  @override
  i9.Points addPoints({int? points, int? userId}) => (super.noSuchMethod(
      Invocation.method(#addPoints, [], {#points: points, #userId: userId}),
      returnValue: _FakePoints_15()) as i9.Points);
  @override
  i11.Future<i9.Subscription> updateSubscription(
          {int? userId,
          int? interval,
          List<i9.Feature>? features,
          String? descriptor,
          double? amount}) =>
      (super.noSuchMethod(
              Invocation.method(#updateSubscription, [], {
                #userId: userId,
                #interval: interval,
                #features: features,
                #descriptor: descriptor,
                #amount: amount
              }),
              returnValue:
                  Future<i9.Subscription>.value(_FakeSubscription_16()))
          as i11.Future<i9.Subscription>);
  @override
  i11.Future<bool> activeSubscription() =>
      (super.noSuchMethod(Invocation.method(#activeSubscription, []),
          returnValue: Future<bool>.value(false)) as i11.Future<bool>);
  @override
  void monitorSubscription({int? userId}) => super.noSuchMethod(
      Invocation.method(#monitorSubscription, [], {#userId: userId}),
      returnValueForMissingStub: null);
}
