name: Deploy to Play Store
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane to use (beta OR promote_to_production OR production)"
        required: true
        default: "beta"
  # Refs/tags push events to matching v*, i.e. v1.0, v20.15.10
  push:
    branches: [main, dev]
    # tags:
    # - 'v*'

jobs:
  # testing:
  #   name: Unit Testing
  #   runs-on: ubuntu-18.04
  #   # needs: [integrationTest]
  #   # runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: actions/setup-java@v1
  #       with:
  #         java-version: "8.x"
  #     - uses: subosito/flutter-action@master
  #       with:
  #         # flutter-version: '1.22.3'
  #         channel: "stable"
  #     # pause test on server for now
  #     - run: git submodule update --init
  #     - name: Configure Missing files
  #       run: |
  #         echo "$INDEX" >> web/index.html
  #         echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
  #         echo "$FIREBASEOPTIONS" >> lib/firebase_options.dart
  #       env:
  #         INDEX: ${{ secrets.INDEX }}
  #         CONFIGDART: ${{ secrets.CONFIGDART }}
  #         FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
  #     - run: dart pub global activate melos
  #     - name: "Run Melos bootstrap"
  #       run: melos bootstrap
  #     - run: flutter test
  # TODOpause testing
  fastlane-deploy:
    name: "Google Deploy"
    # needs: [testing]
    runs-on: ubuntu-18.04
    steps:
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8
        with:
          channel: stable
      - run: flutter doctor -v

      # Checkout gallery code and get packages.
      - name: Checkout flipper code
        uses: actions/checkout@v2
      - name: Update version in YAML
        run: sed -i 's/1.0.1-dev.3/1.93.0+111101093/g' pubspec.yaml
      - name: submodule init
        run: git submodule update --init
      - name: Configure Missing files
        run: |
          echo "$INDEX" >> web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$FIREBASEOPTIONS" >> lib/firebase_options.dart
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
      - run: dart pub global activate melos
      - name: "Run Melos bootstrap"
        run: melos bootstrap
      # Setup Ruby, Bundler, and Gemfile dependencies
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.6"
          bundler-cache: true
          working-directory: android
      - name: Configure Keystore
        run: |
          echo "$GOOGLE_SERVICE_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/key.jks
          echo "storeFile=key.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        working-directory: android

      # Build and deploy with Fastlane (by default, to beta track) ðŸš€.
      # Naturally, promote_to_production only deploys.
      - run: bundle exec fastlane ${{ github.event.inputs.lane || 'internal' }}
        env:
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
        working-directory: android
  slackNotification:
    name: Slack Notification
    needs: [fastlane-deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
