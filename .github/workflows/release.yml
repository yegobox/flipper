name: CI/CD

on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane"
        required: true
        default: "internal"
        type: choice
        options:
          - beta
          - promote_to_production
          - production
  pull_request:
    branches: 
      - main

env:
  URL: ${{ secrets.DB_URL }}
  PASSWORD: ${{ secrets.DB_PASSWORD }}
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: "stable"

      - run: |
          git submodule update --init
      - name: Load melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          git config --global core.autocrlf false
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json 
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - run: |
          cd apps/flipper
          cd ../..
          cd packages/flipper_dashboard
          flutter test --dart-define=FLUTTER_TEST_ENV=true
          cd ..
          cd flipper_models
          flutter test --dart-define=FLUTTER_TEST_ENV=true

  integration-testing-windows:
    name: "Integration Testing Windows"
    runs-on: windows-2022
    needs: [unit-testing,android-integration-test]
    steps:
      - name: Export pub environment variable on Windows
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "PUB_CACHE=$LOCALAPPDATA\\Pub\\Cache" >> $GITHUB_ENV
          fi
        shell: bash
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: stable
      - run: flutter doctor -v

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: submodule init
        run: |
          git submodule update --init
          dart pub global activate melos 6.3.2
          melos bootstrap
      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}  
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      - run: |
          cd apps/flipper
          flutter test --dart-define=FLUTTER_TEST_ENV=false -d windows integration_test/smoke_windows_test.dart
  build-and-release-windows-debug:
    name: "Build windows-DEBUG"
    needs: [unit-testing, android-integration-test,integration-testing-windows]
    runs-on: windows-2022
    steps:
      - name: Export pub environment variable on Windows
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "PUB_CACHE=$LOCALAPPDATA\\Pub\\Cache" >> $GITHUB_ENV
          fi
        shell: bash
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: stable
      - run: flutter doctor -v

      - name: submodule init
        run: |
          git submodule update --init
      - name: Load melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap
      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }} 
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      # Replace Visual Studio 17.12 with 17.10 to workaround Firebase issue
      # https://github.com/firebase/flutterfire/issues/16536
      # TODO: remove this visual studio change when https://github.com/firebase/flutterfire/issues/16536 is resolved.
      - name: Cleanup Visual Studio Installer
        continue-on-error: true
        run: |
          & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\InstallCleanup.exe"
        shell: pwsh

      # Replace Visual Studio 17.12 with 17.10 to workaround Firebase issue
      # https://github.com/firebase/flutterfire/issues/16536
      - name: Install Visual Studio 2022 Enterprise
        run: |
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release.ltsc.17.10/vs_enterprise.exe -OutFile vs_enterprise.exe
          $process = Start-Process -FilePath '.\vs_enterprise.exe' -ArgumentList "--add", "Microsoft.VisualStudio.Workload.Azure", "--quiet", "--norestart", "--wait", "--includeRecommended" -Wait -PassThru
          Write-Output $process.ExitCode
          $process = Start-Process -FilePath '.\vs_enterprise.exe' -ArgumentList "--add", "Microsoft.VisualStudio.Workload.NativeDesktop", "--quiet", "--norestart", "--wait", "--includeRecommended" -Wait -PassThru
          Write-Output $process.ExitCode
        shell: pwsh
        # End of issue
      - run: |
          cd apps/flipper
          dart run msix:create -v --install-certificate false
      - name: Configure Release (optional)
        env:
          VERSION: ${{ github.sha }} # Or use a semantic versioning scheme
        run: |
          echo "## Release Notes" >> release_notes.txt
          echo " - New features..." >> release_notes.txt
          echo " - Bug fixes..." >> release_notes.txt
     
      - name: Extract msix_version
        id: get_version
        shell: powershell
        run: |
          $MSIX_VERSION = (Get-Content -Path "apps/flipper/pubspec.yaml" -Raw) -match 'msix_config:\s*([\s\S]*?)\bmsix_version:\s*(\d+\.\d+\.\d+\.\d+)\b' | ForEach-Object { if ($matches.Count -ge 2) { $matches[2] } else { Write-Output "No msix_version found"; exit 1 } }; echo "::set-output name=version::$MSIX_VERSION"

      - name: Upload .msix to Release
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          name: windows-build-debug-${{ steps.get_version.outputs.version }}
          path: apps/flipper/build/windows/x64/runner/Release/flipper_rw.msix
          upload_release_asset: false
  build-and-release-windows-prod:
    name: "Build windows-PROD"
    needs: [unit-testing, android-integration-test,integration-testing-windows]
    runs-on: windows-2022
    steps:
      - name: Export pub environment variable on Windows
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "PUB_CACHE=$LOCALAPPDATA\\Pub\\Cache" >> $GITHUB_ENV
          fi
        shell: bash
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: stable
      - run: flutter doctor -v

      - name: submodule init
        run: |
          git submodule update --init
      - name: Load melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap
      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }} 
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      - run: |
          
          cd apps/flipper
          dart run msix:create 	--store
      - name: Configure Release (optional)
        env:
          VERSION: ${{ github.sha }} # Or use a semantic versioning scheme
        run: |
          echo "## Release Notes" >> release_notes.txt
          echo " - New features..." >> release_notes.txt
          echo " - Bug fixes..." >> release_notes.txt
      - name: Extract msix_version
        id: get_version
        shell: powershell
        run: |
          $MSIX_VERSION = (Get-Content -Path "apps/flipper/pubspec.yaml" -Raw) -match 'msix_config:\s*([\s\S]*?)\bmsix_version:\s*(\d+\.\d+\.\d+\.\d+)\b' | ForEach-Object { if ($matches.Count -ge 2) { $matches[2] } else { Write-Output "No msix_version found"; exit 1 } }; echo "::set-output name=version::$MSIX_VERSION"

      - name: Upload .msix to Release
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          name: windows-build-prod-${{ steps.get_version.outputs.version }}
          path: apps/flipper/build/windows/x64/runner/Release/flipper_rw.msix
          upload_release_asset: false


  android-integration-test:
    name: integration on Android
    needs: [unit-testing]
    runs-on: macOS-12
    # runs-on: macos-latest
    strategy:
      matrix:
        api-level: [31]
        target: [playstore]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1"
          channel: stable
      - name: Configure Git with PAT
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.email "info@yegobox.com"
          git config --global user.name "YEGOBOX"
          git config --global credential.helper store
          echo "https://github.com:${PAT_TOKEN}@github.com" > ~/.git-credentials
      - name: submodule init
        run: |
          git submodule update --init
      - name: Load melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap
      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          git config --global core.autocrlf false
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }} 
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      - name: Configure Keystore
        run: |
          echo "$GOOGLE_SERVICE_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/key.jks
          echo "storeFile=key.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        working-directory: apps/flipper/android
    
      - name: Install Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.1.7
      - run: echo $ANDROID_HOME
      - run: sdkmanager platform-tools
      # - run: sdkmanager --install "ndk;23.1.7779620"
      # - run: sdkmanager --install "build-tools;30.0.3"
      - uses: malinskiy/action-android/emulator-run-cmd@release/0.1.7
        with:
          cmd: cd apps/flipper  &&  flutter test --dart-define=FLUTTER_TEST_ENV=true  integration_test/smoke_android_test.dart
          api: 25
          cmdOptions: -no-snapshot-save -noaudio -no-boot-anim -cores 2 -memory 3072 -no-window
          tag: google_apis
          abi: x86
          # abi: x86_64
          bootTimeout: 820
      - run: sleep 30
  fastlane-deploy:
    name: "Google Deploy"
    needs: [unit-testing,android-integration-test, integration-testing-windows]
    # runs-on: ubuntu-22.04
    runs-on: macOS-12
    steps:
      - run: git config --global core.autocrlf false
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.1" #firebase_auth_desktop is broken with  3.10.6
          channel: stable
      - run: flutter doctor -v

      # Checkout flipper code
      - name: Checkout flipper code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - uses: actions/setup-java@v4 #plugin for setting up the java
        with:
          distribution: "zulu"
          java-version: "17" #defines the java version
      - name: Configure Git with PAT
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.email "info@yegobox.com"
          git config --global user.name "YEGOBOX"
          git config --global credential.helper store
          echo "https://github.com:${PAT_TOKEN}@github.com" > ~/.git-credentials
      - name: submodule init
        run: git submodule update --init
      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          git config --global core.autocrlf false
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
          
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }} 
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      - run: |
          dart pub global activate melos 6.3.2
          melos bootstrap
      # Setup Ruby, Bundler, and Gemfile dependencies
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true
          # cache-version: 1
          working-directory: apps/flipper/android
      - name: Configure Keystore
        run: |
          echo "$GOOGLE_SERVICE_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/key.jks
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode  > play_store_upload_key.txt
          cat play_store_upload_key.txt
          echo "storeFile=key.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        working-directory: apps/flipper/android
      - run: |
          bundle exec fastlane ${{ github.event.inputs.lane || 'internal' }}
        env:
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        working-directory: apps/flipper/android
  slackNotification:
    name: Slack Notification
    needs: [fastlane-deploy, build-and-release-windows-debug,build-and-release-windows-prod]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
