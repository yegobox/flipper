name: Flipper - CI/CD - Windows & Android & Google Play

on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane"
        required: true
        default: "internal"
        type: choice
        options:
          - beta
          - promote_to_production
          - production
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  URL: ${{ secrets.DB_URL }}
  PASSWORD: ${{ secrets.DB_PASSWORD }}
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  # SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} # Securely store this
  IS_TEST_ENV: true

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: windows-2022
    # needs: [supabase-init] # Requires Supabase to be initialized
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: "stable"
      - run: |
          git submodule update --init
      - name: Load melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          git config --global core.autocrlf false
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - run: |
          cd apps/flipper
          cd ../..
          cd packages/flipper_dashboard
          flutter test --dart-define=FLUTTER_TEST_ENV=true --verbose

  integration-testing-windows:
    name: "Integration Testing Windows"
    runs-on: windows-2022
    needs: [unit-testing] # Requires Supabase to be initialized
    steps:
      - name: Export pub environment variable on Windows
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "PUB_CACHE=$LOCALAPPDATA\\Pub\\Cache" >> $GITHUB_ENV
          fi
        shell: bash
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: stable
      - run: flutter doctor -v

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Initialize submodules
        run: git submodule update --init

      - name: Setup melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      - run: |
          cd apps/flipper
          flutter test --dart-define=FLUTTER_TEST_ENV=true -d windows integration_test/smoke_windows_test.dart
  integration-testing-macos:
    name: "Integration Testing MacOS"
    runs-on: macOS-latest
    needs: [unit-testing]
    steps:
      - run: git config --global core.autocrlf false

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: stable

      - run: flutter doctor -v

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Install Dependencies
        run: |
          git submodule update --init
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Configure Missing files
        run: |
          printf "%s" "$INDEX" > apps/flipper/web/index.html
          printf "%s" "$CONFIGDART" > packages/flipper_login/lib/config.dart
          printf "%s" "$SECRETS" > packages/flipper_models/lib/secrets.dart
          printf "%s" "$FIREBASEOPTIONS" > apps/flipper/lib/firebase_options.dart
          printf "%s" "$FIREBASEOPTIONS" > packages/flipper_models/lib/firebase_options.dart
          printf "%s" "$AMPLIFY_CONFIG" > apps/flipper/lib/amplifyconfiguration.dart
          printf "%s" "$AMPLIFY_TEAM_PROVIDER" > apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - run: |
          cd apps/flipper/macos
          pod install --repo-update
          cd ..
          cd apps/flipper
          flutter test --dart-define=FLUTTER_TEST_ENV=true --dart-define=FORCE_TEST=true -d macos integration_test/smoke_windows_test.dart

  build-and-release-windows-debug:
    name: "Build windows app-debug"
    runs-on: windows-2022
    needs: [unit-testing] # Requires Supabase to be initialized
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }} # Use a token with repo scope for releases
          persist-credentials: true

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: stable
          cache: true

      - name: Initialize submodules
        run: git submodule update --init

      - name: Setup melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Build and Package
        run: |
          flutter clean
          dart run msix:create -v --install-certificate false

      - name: Extract msix_version
        id: get_version
        shell: powershell
        run: |
          $MSIX_VERSION = (Get-Content -Path "apps/flipper/pubspec.yaml" -Raw) -match 'msix_config:\s*([\s\S]*?)\bmsix_version:\s*(\d+\.\d+\.\d+\.\d+)\b' | ForEach-Object { if ($matches.Count -ge 2) { $matches[2] } else { Write-Output "No msix_version found"; exit 1 } }; echo "::set-output name=version::$MSIX_VERSION"

      - name: Create Debug Releasse
        uses: softprops/action-gh-release@v1
        with:
          files: apps/flipper/build/windows/x64/runner/Release/flipper_rw.msix
          tag_name: ${{ github.ref_name }}  # Or a dynamic tag based on your strategy
          name: Debug Release ${{ steps.get_version.outputs.version }}
          body: |
            Debug Release for QA
        env:
          GITHUB_TOKEN: ${{ github.token }}  # Use the default GITHUB_TOKEN

  build-and-release-windows-prod:
    name: "Build windows app-store"
    if: github.event_name == 'merge' && github.ref == 'refs/heads/main'
    runs-on: windows-2022
    needs: [unit-testing, integration-testing-windows] # Requires Supabase to be initialized
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}  # Use a PAT
          persist-credentials: true  # Keep this for checkout

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: stable
          cache: true

      - name: Initialize submodules
        run: git submodule update --init

      - name: Setup melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Build and Package
        run: |
          flutter clean
          dart run msix:create --store

      - name: Extract msix_version
        id: get_version
        shell: powershell
        run: |
          $MSIX_VERSION = (Get-Content -Path "apps/flipper/pubspec.yaml" -Raw) -match 'msix_config:\s*([\s\S]*?)\bmsix_version:\s*(\d+\.\d+\.\d+\.\d+)\b' | ForEach-Object { if ($matches.Count -ge 2) { $matches[2] } else { Write-Output "No msix_version found"; exit 1 } }; echo "::set-output name=version::$MSIX_VERSION"

      - name: Create Production Release
        uses: softprops/action-gh-release@v1
        with:
          files: apps/flipper/build/windows/x64/runner/Release/flipper_rw.msix
          tag_name: ${{ github.ref_name }}  # Or a dynamic tag based on your strategy
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Production Release for Windows App Store
        env:
          GITHUB_TOKEN: ${{ github.token }}  # Use the default GITHUB_TOKEN
  integration-on-android:
    name: Integration on Android
    needs: [unit-testing]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [33]
        target: [google_apis]
        arch: [x86_64]
      fail-fast: false
    steps:
      - run: git config --global core.autocrlf false
      
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0"
          channel: stable
      - run: flutter doctor -v

      - name: Checkout flipper code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Configure Git with PAT
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.email "info@yegobox.com"
          git config --global user.name "YEGOBOX"
          git config --global credential.helper store
          echo "https://github.com:${PAT_TOKEN}@github.com" > ~/.git-credentials

      - name: Initialize submodules
        run: git submodule update --init

      - name: Setup melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap

      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          git config --global core.autocrlf false
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Install Android SDK components
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-33" \
            "build-tools;33.0.2" \
            "system-images;android-33;google_apis;x86_64" \
            "emulator" \
            "cmdline-tools;latest" > /dev/null # Add this line

      - name: Create and start emulator
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test -k "system-images;android-33;google_apis;x86_64" --force
          echo "hw.cpu.ncore=2" >> ~/.android/avd/test.avd/config.ini
          echo "hw.ramSize=2048" >> ~/.android/avd/test.avd/config.ini
          nohup $ANDROID_HOME/emulator/emulator -avd test -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim &
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'

      - name: Setup patrol
        run: |
          cd apps/flipper
          dart pub global activate patrol_cli
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          patrol doctor

      - name: Run integration tests
        run: |
          cd apps/flipper
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          flutter pub get
          flutter pub upgrade
          flutter pub outdated || true
          patrol drive \
            --target=integration_test/smoke_android_test.dart \
            --dart-define=FLUTTER_TEST_ENV=true \
            --dart-define=FORCE_TEST=true \
            --verbose

  fastlane-deploy:
    name: "Google Deploy"
    needs: [unit-testing, integration-testing-windows]  # Requires Supabase to be initialized
    # runs-on: ubuntu-22.04
    runs-on: macOS-14
    steps:
      - run: git config --global core.autocrlf false
      # Set up Flutter.
      - name: Clone Flutter repository with stable channel
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.0" #firebase_auth_desktop is broken with  3.10.6
          channel: stable
      - run: flutter doctor -v

      # Checkout flipper code
      - name: Checkout flipper code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      - uses: actions/setup-java@v4 #plugin for setting up the java
        with:
          distribution: "zulu"
          java-version: "17" #defines the java version
      - name: Configure Git with PAT
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.email "info@yegobox.com"
          git config --global user.name "YEGOBOX"
          git config --global credential.helper store
          echo "https://github.com:${PAT_TOKEN}@github.com" > ~/.git-credentials
      - name: Initialize submodules
        run: git submodule update --init
      - name: Setup melos
        run: |
          dart pub global activate melos 6.3.2
          melos bootstrap
      - name: Configure Missing files
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          git config --global core.autocrlf false
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}
      - run: |
          dart pub global activate melos 6.3.2
          melos bootstrap
      # Setup Ruby, Bundler, and Gemfile dependencies
      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true
          # cache-version: 1
          working-directory: apps/flipper/android
      - name: Configure Keystore
        run: |
          echo "$GOOGLE_SERVICE_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/key.jks
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode  > play_store_upload_key.txt
          cat play_store_upload_key.txt
          echo "storeFile=key.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        working-directory: apps/flipper/android
      - run: |
          bundle exec fastlane ${{ github.event.inputs.lane || 'internal' }}
        env:
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        working-directory: apps/flipper/android

  slackNotification:
    name: Slack Notification
    needs: [fastlane-deploy, build-and-release-windows-debug, build-and-release-windows-prod]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}