name: Flipper - CI/CD - Windows & Android & Google Play

on:
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane"
        required: true
        default: "internal"
        type: choice
        options:
          - beta
          - promote_to_production
          - production
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  FLUTTER_VERSION: "3.29.0"
  MELOS_VERSION: "6.3.2"
  JAVA_VERSION: "17"
  ANDROID_API_LEVEL: 33 # Default API level for Android
  # Secrets (define here for clarity, but fetch in steps)
  DB_URL: ${{ secrets.DB_URL }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
  SUPABASE_URL: http://localhost:54321
  SUPABASE_ANON_KEY: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
  # SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }} # Securely store this
  IS_TEST_ENV: true

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: windows-2022
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Install Melos and Bootstrap
        shell: bash
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
          git config --global core.autocrlf false

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Run Unit Tests
        run: |
          cd packages/flipper_dashboard
          flutter test --dart-define=FLUTTER_TEST_ENV=true --verbose

  integration-testing-windows:
    name: "Integration Testing Windows"
    runs-on: windows-2022
    needs: [unit-testing]

    steps:
      - name: Export pub environment variable on Windows
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "PUB_CACHE=$LOCALAPPDATA\\Pub\\Cache" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install Melos and Bootstrap
        shell: bash
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
          git config --global core.autocrlf false

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Run Integration Tests (Windows)
        run: |
          cd apps/flipper
          flutter test --dart-define=FLUTTER_TEST_ENV=true -d windows integration_test/smoke_windows_test.dart

  integration-testing-macos:
    name: "Integration Testing MacOS"
    runs-on: macOS-latest
    needs: [unit-testing]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Flutter Doctor
        run: flutter doctor -v

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Install Melos and Bootstrap
        shell: bash
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap

      - name: Configure Missing files
        shell: bash
        run: |
          printf "%s" "$INDEX" > apps/flipper/web/index.html
          printf "%s" "$CONFIGDART" > packages/flipper_login/lib/config.dart
          printf "%s" "$SECRETS" > packages/flipper_models/lib/secrets.dart
          printf "%s" "$FIREBASEOPTIONS" > apps/flipper/lib/firebase_options.dart
          printf "%s" "$FIREBASEOPTIONS" > packages/flipper_models/lib/firebase_options.dart
          printf "%s" "$AMPLIFY_CONFIG" > apps/flipper/lib/amplifyconfiguration.dart
          printf "%s" "$AMPLIFY_TEAM_PROVIDER" > apps/flipper/amplify/team-provider-info.json

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Pod Install
        run: |
          cd apps/flipper/macos
          pod install --repo-update

      - name: Run Integration Tests (MacOS)
        run: |
          cd apps/flipper
          flutter test --dart-define=FLUTTER_TEST_ENV=true --dart-define=FORCE_TEST=true -d macos integration_test/smoke_windows_test.dart

  build-and-release-windows-debug:
    name: "Build windows app-debug"
    runs-on: windows-2022
    needs: [unit-testing]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Install Melos and Bootstrap
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap

      - name: Build and Package (Debug)
        run: |
          cd apps/flipper
          flutter clean
          dart run msix:create -v --install-certificate false

      - name: Extract msix_version
        id: get_version
        shell: powershell
        run: |
          $MSIX_VERSION = (Get-Content -Path "apps/flipper/pubspec.yaml" -Raw) -match 'msix_config:\s*([\s\S]*?)\bmsix_version:\s*(\d+\.\d+\.\d+\.\d+)\b' | ForEach-Object { if ($matches.Count -ge 2) { $matches[2] } else { Write-Output "No msix_version found"; exit 1 } }; echo "::set-output name=version::$MSIX_VERSION"

      - name: Create Debug Release
        uses: softprops/action-gh-release@v1
        with:
          files: apps/flipper/build/windows/x64/runner/Release/flipper_rw.msix
          tag_name: ${{ github.ref_name }}
          name: Debug Release ${{ steps.get_version.outputs.version }}
          body: |
            Debug Release for QA
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build-and-release-windows-prod:
    name: "Build windows app-store"
    runs-on: windows-2022
    needs: [unit-testing, integration-testing-windows]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Install Melos and Bootstrap
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap

      - name: Build and Package (Production)
        run: |
          cd apps/flipper
          flutter clean
          dart run msix:create --store

      - name: Extract msix_version
        id: get_version
        shell: powershell
        run: |
          $MSIX_VERSION = (Get-Content -Path "apps/flipper/pubspec.yaml" -Raw) -match 'msix_config:\s*([\s\S]*?)\bmsix_version:\s*(\d+\.\d+\.\d+\.\d+)\b' | ForEach-Object { if ($matches.Count -ge 2) { $matches[2] } else { Write-Output "No msix_version found"; exit 1 } }; echo "::set-output name=version::$MSIX_VERSION"

      - name: Create Production Release
        uses: softprops/action-gh-release@v1
        with:
          files: apps/flipper/build/windows/x64/runner/Release/flipper_rw.msix
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Production Release for Windows App Store
        env:
          GITHUB_TOKEN: ${{ github.token }}

  integration-on-android:
    name: Integration on Android
    needs: [unit-testing]
    runs-on: macOS-latest
    strategy:
      matrix:
        api-level: [21,35]   # Use default API level
        target: [google_apis_playstore]
        arch: [x86_64, arm64-v8a]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure Git with PAT
        run: |
          git config --global user.email "info@yegobox.com"
          git config --global user.name "YEGOBOX"
          git config --global credential.helper store
          echo "https://github.com:${{ secrets.PAT_TOKEN }}@github.com" > ~/.git-credentials
        shell: bash

      - name: Install Melos and Bootstrap
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap
        shell: bash

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
          git config --global core.autocrlf false

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true
          working-directory: apps/flipper/android

      - name: Configure Keystore
        run: |
          echo "$GOOGLE_SERVICE_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/key.jks
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode  > play_store_upload_key.txt
          cat play_store_upload_key.txt
          echo "storeFile=key.jks" >> key.properties
          echo "keyAlias=${{ secrets.KEYSTORE_KEY_ALIAS }}" >> key.properties
          echo "storePassword=${{ secrets.KEYSTORE_STORE_PASSWORD }}" >> key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        working-directory: apps/flipper/android

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}

      - name: Create AVD and Generate Snapshot for Caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          profile: Nexus 6
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          force-avd-creation: true
          script: echo "Generated AVD snapshot for caching."

      - name: Wait for Emulator
        run: |
          echo "Waiting for emulator to boot..."
          adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator booted!"

      - name: Run Integration Tests (Android Emulator)
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          profile: Nexus 6
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: |
            cd apps/flipper
            flutter test --dart-define=FLUTTER_TEST_ENV=true integration_test/smoke_android_test.dart

  fastlane-deploy:
    name: "Google Deploy"
    needs: [unit-testing, integration-testing-windows]
    runs-on: macOS-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.ACCESS_TOKEN }}
          persist-credentials: true

      - name: Set up Flutter ${{ env.FLUTTER_VERSION }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Configure Git with PAT
        run: |
          git config --global user.email "info@yegobox.com"
          git config --global user.name "YEGOBOX"
          git config --global credential.helper store
          echo "https://github.com:${{ secrets.PAT_TOKEN }}@github.com" > ~/.git-credentials
        shell: bash

      - name: Install Melos and Bootstrap
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          melos bootstrap
        shell: bash

      - name: Configure Missing files
        shell: bash
        run: |
          echo "$INDEX" >> apps/flipper/web/index.html
          echo "$CONFIGDART" >> packages/flipper_login/lib/config.dart
          echo "$SECRETS" >> packages/flipper_models/lib/secrets.dart
          echo "$FIREBASEOPTIONS" >> apps/flipper/lib/firebase_options.dart
          echo "$FIREBASEOPTIONS" >> packages/flipper_models/lib/firebase_options.dart
          echo "$AMPLIFY_CONFIG" >> apps/flipper/lib/amplifyconfiguration.dart
          echo "$AMPLIFY_TEAM_PROVIDER" >> apps/flipper/amplify/team-provider-info.json
          git config --global core.autocrlf false

        env:
          INDEX: ${{ secrets.INDEX }}
          CONFIGDART: ${{ secrets.CONFIGDART }}
          SECRETS: ${{ secrets.SECRETS }}
          FIREBASEOPTIONS: ${{ secrets.FIREBASEOPTIONS }}
          AMPLIFY_CONFIG: ${{ secrets.AMPLIFY_CONFIG }}
          AMPLIFY_TEAM_PROVIDER: ${{ secrets.AMPLIFY_TEAM_PROVIDER }}

      - name: Setup Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true
          working-directory: apps/flipper/android

      - name: Configure Keystore
        run: |
          echo "$GOOGLE_SERVICE_JSON" > app/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/key.jks
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode  > play_store_upload_key.txt
          cat play_store_upload_key.txt
          echo "storeFile=key.jks" >> key.properties
          echo "keyAlias=${{ secrets.KEYSTORE_KEY_ALIAS }}" >> key.properties
          echo "storePassword=${{ secrets.KEYSTORE_STORE_PASSWORD }}" >> key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        working-directory: apps/flipper/android

      - name: Deploy to Google Play
        run: |
          bundle exec fastlane ${{ github.event.inputs.lane || 'internal' }}
        env:
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        working-directory: apps/flipper/android

  slackNotification:
    name: Slack Notification
    needs: [fastlane-deploy, build-and-release-windows-debug, build-and-release-windows-prod]
    runs-on: ubuntu-22.04
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}