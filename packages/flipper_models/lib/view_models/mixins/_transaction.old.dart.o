 // Future<void> addTransactionItems({
  //   required String variationId,
  //   required ITransaction pendingTransaction,
  //   required String name,
  //   required Variant variation,
  //   required double currentStock,
  //   required double amountTotal,
  //   required bool isCustom,
  //   TransactionItem? item,
  //   double? compositePrice,
  //   required bool partOfComposite,
  // }) async {
  //   try {
  //     if (item != null && !isCustom) {
  //       // Update existing non-custom item
  //       item.doneWithTransaction = false;

  //       await ProxyService.strategy.updateTransactionItem(
  //         transactionItemId: item.id,
  //         doneWithTransaction: false,
  //         qty: item.qty + quantity,
  //         taxblAmt: variation.retailPrice! * quantity,
  //         price: amountTotal / quantity,
  //         totAmt: variation.retailPrice! * quantity,
  //         prc: item.prc + variation.retailPrice! * quantity,
  //         splyAmt: variation.supplyPrice,
  //         quantityApproved: 0,
  //         active: true,
  //         quantityRequested: ((item.qty) + quantity).toInt(),
  //         quantityShipped: 0,
  //       );

  //       await updatePendingTransactionTotals(pendingTransaction);
  //     } else {
  //       // Add new item (for both custom and new non-custom items)
  //       double computedQty = isCustom ? 1.0 : quantity;
  //       if (partOfComposite) {
  //         Composite? composite =
  //             (await ProxyService.strategy.composites(variantId: variation.id))
  //                 .firstOrNull;
  //         computedQty = composite?.qty ?? 0.0;
  //       }

  //       TransactionItem newItem = TransactionItem(
  //         compositePrice: partOfComposite == true ? compositePrice! : 0.0,
  //         price: variation.retailPrice!,
  //         variantId: variation.id,
  //         name: name,
  //         quantityApproved: 0,
  //         quantityRequested: computedQty.toInt(),
  //         quantityShipped: 0,
  //         branchId: ProxyService.box.getBranchId(),
  //         discount: 0.0,
  //         prc: variation.retailPrice!,
  //         doneWithTransaction: false,
  //         active: true,
  //         transactionId: pendingTransaction.id,
  //         createdAt: DateTime.now().toUtc(),
  //         updatedAt: DateTime.now().toUtc(),
  //         remainingStock: currentStock - quantity,
  //         lastTouched: DateTime.now().toUtc(),
  //         qty: computedQty,
  //         taxblAmt: variation.retailPrice! * quantity,
  //         taxAmt: double.parse((amountTotal * 18 / 118).toStringAsFixed(2)),
  //         totAmt: variation.retailPrice! * quantity,
  //         itemSeq: variation.itemSeq,
  //         isrccCd: variation.isrccCd,
  //         isrccNm: variation.isrccNm,
  //         isrcRt: variation.isrcRt,
  //         isrcAmt: variation.isrcAmt,
  //         taxTyCd: variation.taxTyCd,
  //         bcd: variation.bcd,
  //         itemClsCd: variation.itemClsCd,
  //         itemTyCd: variation.itemTyCd,
  //         itemStdNm: variation.itemStdNm,
  //         orgnNatCd: variation.orgnNatCd,
  //         pkg: variation.pkg.toString(),
  //         itemCd: variation.itemCd,
  //         pkgUnitCd: variation.pkgUnitCd,
  //         qtyUnitCd: variation.qtyUnitCd,
  //         itemNm: variation.itemNm!,
  //         splyAmt: variation.supplyPrice,
  //         tin: variation.tin,
  //         bhfId: variation.bhfId,
  //         dftPrc: variation.dftPrc,
  //         addInfo: variation.addInfo,
  //         isrcAplcbYn: variation.isrcAplcbYn,
  //         useYn: variation.useYn,
  //         regrId: variation.regrId,
  //         regrNm: variation.regrNm,
  //         modrId: variation.modrId,
  //         modrNm: variation.modrNm,
  //         partOfComposite: partOfComposite,
  //         dcRt: variation.dcRt,
  //         dcAmt: (variation.retailPrice! * (variation.qty ?? 1.0)) *
  //             (variation.dcRt ?? 0.0),
  //       );

  //       await ProxyService.strategy.addTransactionItem(
  //           transaction: pendingTransaction,
  //           item: newItem,
  //           partOfComposite: partOfComposite);
  //     }

  //     // Handle activation of inactive items
  //     List<TransactionItem> inactiveItems = await ProxyService.strategy
  //         .transactionItems(
  //             branchId: ProxyService.box.getBranchId()!,
  //             transactionId: pendingTransaction.id,
  //             doneWithTransaction: false,
  //             active: false);

  //     markItemAsDoneWithTransaction(
  //         inactiveItems: inactiveItems, pendingTransaction: pendingTransaction);
  //     updatePendingTransactionTotals(pendingTransaction);
  //   } catch (e, s) {
  //     talker.warning(e);
  //     talker.error(s);
  //     rethrow;
  //   }
  // }