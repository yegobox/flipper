// Mocks generated by Mockito 5.4.4 from annotations
// in flipper_dashboard/test/payment_plan_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:typed_data' as _i15;

import 'package:flipper_models/flipper_http_client.dart' as _i12;
import 'package:flipper_models/helper_models.dart' as _i14;
import 'package:flipper_models/helperModels/paystack_customer.dart' as _i6;
import 'package:flipper_models/helperModels/RwApiResponse.dart' as _i5;
import 'package:flipper_models/realm_model_export.dart' as _i3;
import 'package:flipper_models/RealmApi.dart' as _i8;
import 'package:flipper_models/realmInterface.dart' as _i4;
import 'package:flipper_models/sync_service.dart' as _i7;
import 'package:flipper_services/constants.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:realm/realm.dart' as _i9;
import 'package:talker_flutter/talker_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTalker_0 extends _i1.SmartFake implements _i2.Talker {
  _FakeTalker_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeITransaction_1 extends _i1.SmartFake implements _i3.ITransaction {
  _FakeITransaction_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConversation_2 extends _i1.SmartFake implements _i3.Conversation {
  _FakeConversation_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealmApiInterface_3 extends _i1.SmartFake
    implements _i4.RealmApiInterface {
  _FakeRealmApiInterface_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConfigurations_4 extends _i1.SmartFake
    implements _i3.Configurations {
  _FakeConfigurations_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRwApiResponse_5 extends _i1.SmartFake implements _i5.RwApiResponse {
  _FakeRwApiResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeComposite_6 extends _i1.SmartFake implements _i3.Composite {
  _FakeComposite_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReport_7 extends _i1.SmartFake implements _i3.Report {
  _FakeReport_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTenant_8 extends _i1.SmartFake implements _i3.Tenant {
  _FakeTenant_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePayStackCustomer_9 extends _i1.SmartFake
    implements _i6.PayStackCustomer {
  _FakePayStackCustomer_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaymentPlan_10 extends _i1.SmartFake implements _i3.PaymentPlan {
  _FakePaymentPlan_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RealmAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockRealmAPI<M extends _i7.IJsonSerializable> extends _i1.Mock
    implements _i8.RealmAPI<M> {
  MockRealmAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set realm(_i9.Realm? _realm) => super.noSuchMethod(
        Invocation.setter(
          #realm,
          _realm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Talker get talker => (super.noSuchMethod(
        Invocation.getter(#talker),
        returnValue: _FakeTalker_0(
          this,
          Invocation.getter(#talker),
        ),
      ) as _i2.Talker);

  @override
  String get apihub => (super.noSuchMethod(
        Invocation.getter(#apihub),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#apihub),
        ),
      ) as String);

  @override
  set apihub(String? _apihub) => super.noSuchMethod(
        Invocation.setter(
          #apihub,
          _apihub,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get commApi => (super.noSuchMethod(
        Invocation.getter(#commApi),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#commApi),
        ),
      ) as String);

  @override
  set commApi(String? _commApi) => super.noSuchMethod(
        Invocation.setter(
          #commApi,
          _commApi,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<({double expense, double income})> getTransactionsAmountsSum(
          {required String? period}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionsAmountsSum,
          [],
          {#period: period},
        ),
        returnValue: _i11.Future<({double expense, double income})>.value(
            (expense: 0.0, income: 0.0)),
      ) as _i11.Future<({double expense, double income})>);

  @override
  _i11.Future<
      ({
        List<_i3.Device> devices,
        List<_i3.Favorite> favorites,
        List<_i3.Product> products,
        List<_i3.Stock> stocks,
        List<_i3.TransactionItem> transactionItems,
        List<_i3.ITransaction> transactions,
        List<_i3.Variant> variants
      })> getUnSyncedData() => (super.noSuchMethod(
        Invocation.method(
          #getUnSyncedData,
          [],
        ),
        returnValue: _i11.Future<
            ({
              List<_i3.Device> devices,
              List<_i3.Favorite> favorites,
              List<_i3.Product> products,
              List<_i3.Stock> stocks,
              List<_i3.TransactionItem> transactionItems,
              List<_i3.ITransaction> transactions,
              List<_i3.Variant> variants
            })>.value((
          devices: <_i3.Device>[],
          favorites: <_i3.Favorite>[],
          products: <_i3.Product>[],
          stocks: <_i3.Stock>[],
          transactionItems: <_i3.TransactionItem>[],
          transactions: <_i3.ITransaction>[],
          variants: <_i3.Variant>[]
        )),
      ) as _i11.Future<
          ({
            List<_i3.Device> devices,
            List<_i3.Favorite> favorites,
            List<_i3.Product> products,
            List<_i3.Stock> stocks,
            List<_i3.TransactionItem> transactionItems,
            List<_i3.ITransaction> transactions,
            List<_i3.Variant> variants
          })>);

  @override
  T? findObject<T extends _i9.RealmObject>(
    String? query,
    List<dynamic>? arguments,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #findObject,
        [
          query,
          arguments,
        ],
      )) as T?);

  @override
  _i3.Category? activeCategory({required int? branchId}) =>
      (super.noSuchMethod(Invocation.method(
        #activeCategory,
        [],
        {#branchId: branchId},
      )) as _i3.Category?);

  @override
  _i11.Future<_i3.Customer?> addCustomer({
    required _i3.Customer? customer,
    required int? transactionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCustomer,
          [],
          {
            #customer: customer,
            #transactionId: transactionId,
          },
        ),
        returnValue: _i11.Future<_i3.Customer?>.value(),
      ) as _i11.Future<_i3.Customer?>);

  @override
  _i11.Future<int> addFavorite({required _i3.Favorite? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavorite,
          [],
          {#data: data},
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<_i3.Stock?> addStockToVariant({required _i3.Variant? variant}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStockToVariant,
          [],
          {#variant: variant},
        ),
        returnValue: _i11.Future<_i3.Stock?>.value(),
      ) as _i11.Future<_i3.Stock?>);

  @override
  void addTransactionItem({
    required _i3.ITransaction? transaction,
    required _i3.TransactionItem? item,
    required bool? partOfComposite,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addTransactionItem,
          [],
          {
            #transaction: transaction,
            #item: item,
            #partOfComposite: partOfComposite,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<int> addUnits<T>({required List<Map<String, dynamic>>? units}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUnits,
          [],
          {#units: units},
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<void> assignCustomerToTransaction({
    required int? customerId,
    int? transactionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignCustomerToTransaction,
          [],
          {
            #customerId: customerId,
            #transactionId: transactionId,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Stream<_i3.Tenant?> authState({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #authState,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<_i3.Tenant?>.empty(),
      ) as _i11.Stream<_i3.Tenant?>);

  @override
  _i11.Future<bool> bindProduct({
    required int? productId,
    required int? tenantId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #bindProduct,
          [],
          {
            #productId: productId,
            #tenantId: tenantId,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<List<_i3.Category>> categories({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #categories,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.Category>>.value(<_i3.Category>[]),
      ) as _i11.Future<List<_i3.Category>>);

  @override
  _i11.Future<bool> checkIn({required String? checkInCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIn,
          [],
          {#checkInCode: checkInCode},
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ITransaction collectPayment({
    required double? cashReceived,
    required _i3.ITransaction? transaction,
    required String? paymentType,
    required bool? isIncome,
    required String? bhfId,
    required double? discount,
    String? categoryId,
    required int? branchId,
    required bool? isProformaMode,
    required bool? isTrainingMode,
    required String? transactionType,
    bool? directlyHandleReceipt = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #collectPayment,
          [],
          {
            #cashReceived: cashReceived,
            #transaction: transaction,
            #paymentType: paymentType,
            #isIncome: isIncome,
            #bhfId: bhfId,
            #discount: discount,
            #categoryId: categoryId,
            #branchId: branchId,
            #isProformaMode: isProformaMode,
            #isTrainingMode: isTrainingMode,
            #transactionType: transactionType,
            #directlyHandleReceipt: directlyHandleReceipt,
          },
        ),
        returnValue: _FakeITransaction_1(
          this,
          Invocation.method(
            #collectPayment,
            [],
            {
              #cashReceived: cashReceived,
              #transaction: transaction,
              #paymentType: paymentType,
              #isIncome: isIncome,
              #bhfId: bhfId,
              #discount: discount,
              #categoryId: categoryId,
              #branchId: branchId,
              #isProformaMode: isProformaMode,
              #isTrainingMode: isTrainingMode,
              #transactionType: transactionType,
              #directlyHandleReceipt: directlyHandleReceipt,
            },
          ),
        ),
      ) as _i3.ITransaction);

  @override
  _i11.Future<List<_i3.PColor>> colors({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #colors,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.PColor>>.value(<_i3.PColor>[]),
      ) as _i11.Future<List<_i3.PColor>>);

  @override
  _i11.Future<List<_i3.ITransaction>> completedTransactions({
    required int? branchId,
    String? status = r'completed',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #completedTransactions,
          [],
          {
            #branchId: branchId,
            #status: status,
          },
        ),
        returnValue:
            _i11.Future<List<_i3.ITransaction>>.value(<_i3.ITransaction>[]),
      ) as _i11.Future<List<_i3.ITransaction>>);

  @override
  void consumePoints({
    required int? userId,
    required int? points,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #consumePoints,
          [],
          {
            #userId: userId,
            #points: points,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<_i3.Voucher?> consumeVoucher({required int? voucherCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #consumeVoucher,
          [],
          {#voucherCode: voucherCode},
        ),
        returnValue: _i11.Future<_i3.Voucher?>.value(),
      ) as _i11.Future<_i3.Voucher?>);

  @override
  _i11.Stream<List<_i3.Conversation>> conversations({String? conversationId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #conversations,
          [],
          {#conversationId: conversationId},
        ),
        returnValue: _i11.Stream<List<_i3.Conversation>>.empty(),
      ) as _i11.Stream<List<_i3.Conversation>>);

  @override
  T? create<T>({required T? data}) => (super.noSuchMethod(Invocation.method(
        #create,
        [],
        {#data: data},
      )) as T?);

  @override
  _i11.Future<void> createGoogleSheetDoc({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGoogleSheetDoc,
          [],
          {#email: email},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i3.Receipt?> createReceipt({
    required _i5.RwApiResponse? signature,
    required _i3.ITransaction? transaction,
    required String? qrCode,
    required String? receiptType,
    required _i3.Counter? counter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReceipt,
          [],
          {
            #signature: signature,
            #transaction: transaction,
            #qrCode: qrCode,
            #receiptType: receiptType,
            #counter: counter,
          },
        ),
        returnValue: _i11.Future<_i3.Receipt?>.value(),
      ) as _i11.Future<_i3.Receipt?>);

  @override
  _i11.Future<_i3.Setting?> createSetting({required _i3.Setting? setting}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSetting,
          [],
          {#setting: setting},
        ),
        returnValue: _i11.Future<_i3.Setting?>.value(),
      ) as _i11.Future<_i3.Setting?>);

  @override
  _i11.Future<List<_i3.Customer>> customers({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #customers,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.Customer>>.value(<_i3.Customer>[]),
      ) as _i11.Future<List<_i3.Customer>>);

  @override
  _i11.Future<bool> delete({
    required int? id,
    String? endPoint,
    required _i12.HttpClientInterface? flipperHttpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #id: id,
            #endPoint: endPoint,
            #flipperHttpClient: flipperHttpClient,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> deleteAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllProducts,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<int> deleteFavoriteByIndex({required int? favIndex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFavoriteByIndex,
          [],
          {#favIndex: favIndex},
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<int> deleteTransactionByIndex({required int? transactionIndex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTransactionByIndex,
          [],
          {#transactionIndex: transactionIndex},
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  void emptySentMessageQueue() => super.noSuchMethod(
        Invocation.method(
          #emptySentMessageQueue,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> enableAttendance({
    required int? businessId,
    required String? email,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #enableAttendance,
          [],
          {
            #businessId: businessId,
            #email: email,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i3.Product?> findProductByTenantId({required int? tenantId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #findProductByTenantId,
          [],
          {#tenantId: tenantId},
        ),
        returnValue: _i11.Future<_i3.Product?>.value(),
      ) as _i11.Future<_i3.Product?>);

  @override
  _i11.Stream<List<_i3.Variant>> geVariantStreamByProductId(
          {required int? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #geVariantStreamByProductId,
          [],
          {#productId: productId},
        ),
        returnValue: _i11.Stream<List<_i3.Variant>>.empty(),
      ) as _i11.Stream<List<_i3.Variant>>);

  @override
  _i11.Future<_i3.PColor?> getColor({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getColor,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i3.PColor?>.value(),
      ) as _i11.Future<_i3.PColor?>);

  @override
  _i11.Future<_i3.Conversation?> getConversation(
          {required String? messageId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversation,
          [],
          {#messageId: messageId},
        ),
        returnValue: _i11.Future<_i3.Conversation?>.value(),
      ) as _i11.Future<_i3.Conversation?>);

  @override
  _i11.Future<_i3.Counter?> getCounter({
    required int? branchId,
    required String? receiptType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCounter,
          [],
          {
            #branchId: branchId,
            #receiptType: receiptType,
          },
        ),
        returnValue: _i11.Future<_i3.Counter?>.value(),
      ) as _i11.Future<_i3.Counter?>);

  @override
  _i11.Future<_i3.Variant?> getCustomVariant({
    required int? businessId,
    required int? branchId,
    required int? tinNumber,
    required String? bhFId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomVariant,
          [],
          {
            #businessId: businessId,
            #branchId: branchId,
            #tinNumber: tinNumber,
            #bhFId: bhFId,
          },
        ),
        returnValue: _i11.Future<_i3.Variant?>.value(),
      ) as _i11.Future<_i3.Variant?>);

  @override
  List<_i3.Customer> getCustomers({
    String? key,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomers,
          [],
          {
            #key: key,
            #id: id,
          },
        ),
        returnValue: <_i3.Customer>[],
      ) as List<_i3.Customer>);

  @override
  _i11.Future<_i3.Customer?> getCustomerFuture({
    String? key,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomerFuture,
          [],
          {
            #key: key,
            #id: id,
          },
        ),
        returnValue: _i11.Future<_i3.Customer?>.value(),
      ) as _i11.Future<_i3.Customer?>);

  @override
  _i11.Stream<_i3.Tenant?> getDefaultTenant({required int? businessId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDefaultTenant,
          [],
          {#businessId: businessId},
        ),
        returnValue: _i11.Stream<_i3.Tenant?>.empty(),
      ) as _i11.Stream<_i3.Tenant?>);

  @override
  _i11.Future<_i3.Device?> getDevice({
    required String? phone,
    required String? linkingCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevice,
          [],
          {
            #phone: phone,
            #linkingCode: linkingCode,
          },
        ),
        returnValue: _i11.Future<_i3.Device?>.value(),
      ) as _i11.Future<_i3.Device?>);

  @override
  _i11.Future<_i3.Device?> getDeviceById({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDeviceById,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i3.Device?>.value(),
      ) as _i11.Future<_i3.Device?>);

  @override
  _i11.Future<List<_i3.Device>> getDevices({required int? businessId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDevices,
          [],
          {#businessId: businessId},
        ),
        returnValue: _i11.Future<List<_i3.Device>>.value(<_i3.Device>[]),
      ) as _i11.Future<List<_i3.Device>>);

  @override
  _i11.Future<List<_i3.Discount>> getDiscounts({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscounts,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.Discount>>.value(<_i3.Discount>[]),
      ) as _i11.Future<List<_i3.Discount>>);

  @override
  _i11.Future<_i3.EBM?> getEbmByBranchId({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEbmByBranchId,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<_i3.EBM?>.value(),
      ) as _i11.Future<_i3.EBM?>);

  @override
  _i11.Future<_i3.Favorite?> getFavoriteById({required int? favId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavoriteById,
          [],
          {#favId: favId},
        ),
        returnValue: _i11.Future<_i3.Favorite?>.value(),
      ) as _i11.Future<_i3.Favorite?>);

  @override
  _i11.Future<_i3.Favorite?> getFavoriteByIndex({required int? favIndex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavoriteByIndex,
          [],
          {#favIndex: favIndex},
        ),
        returnValue: _i11.Future<_i3.Favorite?>.value(),
      ) as _i11.Future<_i3.Favorite?>);

  @override
  _i11.Stream<_i3.Favorite?> getFavoriteByIndexStream(
          {required int? favIndex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavoriteByIndexStream,
          [],
          {#favIndex: favIndex},
        ),
        returnValue: _i11.Stream<_i3.Favorite?>.empty(),
      ) as _i11.Stream<_i3.Favorite?>);

  @override
  _i11.Future<_i3.Favorite?> getFavoriteByProdId({required int? prodId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFavoriteByProdId,
          [],
          {#prodId: prodId},
        ),
        returnValue: _i11.Future<_i3.Favorite?>.value(),
      ) as _i11.Future<_i3.Favorite?>);

  @override
  _i11.Future<List<_i3.Favorite>> getFavorites() => (super.noSuchMethod(
        Invocation.method(
          #getFavorites,
          [],
        ),
        returnValue: _i11.Future<List<_i3.Favorite>>.value(<_i3.Favorite>[]),
      ) as _i11.Future<List<_i3.Favorite>>);

  @override
  _i3.Product? getProduct({required int? id}) =>
      (super.noSuchMethod(Invocation.method(
        #getProduct,
        [],
        {#id: id},
      )) as _i3.Product?);

  @override
  _i11.Future<_i3.Product?> getProductByBarCode({
    required String? barCode,
    required int? branchId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductByBarCode,
          [],
          {
            #barCode: barCode,
            #branchId: branchId,
          },
        ),
        returnValue: _i11.Future<_i3.Product?>.value(),
      ) as _i11.Future<_i3.Product?>);

  @override
  _i11.Future<List<_i3.Product?>> getProductByName({
    required String? name,
    required int? branchId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductByName,
          [],
          {
            #name: name,
            #branchId: branchId,
          },
        ),
        returnValue: _i11.Future<List<_i3.Product?>>.value(<_i3.Product?>[]),
      ) as _i11.Future<List<_i3.Product?>>);

  @override
  _i11.Future<List<_i3.Product>> getProductList({
    int? prodIndex,
    required int? branchId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductList,
          [],
          {
            #prodIndex: prodIndex,
            #branchId: branchId,
          },
        ),
        returnValue: _i11.Future<List<_i3.Product>>.value(<_i3.Product>[]),
      ) as _i11.Future<List<_i3.Product>>);

  @override
  _i11.Future<_i3.Receipt?> getReceipt({required int? transactionId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceipt,
          [],
          {#transactionId: transactionId},
        ),
        returnValue: _i11.Future<_i3.Receipt?>.value(),
      ) as _i11.Future<_i3.Receipt?>);

  @override
  _i11.Future<List<_i3.Conversation>> getScheduleMessages() =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduleMessages,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.Conversation>>.value(<_i3.Conversation>[]),
      ) as _i11.Future<List<_i3.Conversation>>);

  @override
  _i11.Future<_i3.Setting?> getSetting({required int? businessId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSetting,
          [],
          {#businessId: businessId},
        ),
        returnValue: _i11.Future<_i3.Setting?>.value(),
      ) as _i11.Future<_i3.Setting?>);

  @override
  _i11.Future<_i3.Setting?> getSocialSetting() => (super.noSuchMethod(
        Invocation.method(
          #getSocialSetting,
          [],
        ),
        returnValue: _i11.Future<_i3.Setting?>.value(),
      ) as _i11.Future<_i3.Setting?>);

  @override
  _i11.Future<_i3.Stock?> getStock({
    required int? branchId,
    required int? variantId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStock,
          [],
          {
            #branchId: branchId,
            #variantId: variantId,
          },
        ),
        returnValue: _i11.Future<_i3.Stock?>.value(),
      ) as _i11.Future<_i3.Stock?>);

  @override
  _i11.Future<_i3.Stock?> getStockById({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockById,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i3.Stock?>.value(),
      ) as _i11.Future<_i3.Stock?>);

  @override
  _i11.Stream<double> getStockStream({
    int? productId,
    int? variantId,
    required int? branchId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockStream,
          [],
          {
            #productId: productId,
            #variantId: variantId,
            #branchId: branchId,
          },
        ),
        returnValue: _i11.Stream<double>.empty(),
      ) as _i11.Stream<double>);

  @override
  _i11.Stream<double> getStockValue({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockValue,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<double>.empty(),
      ) as _i11.Stream<double>);

  @override
  _i11.Future<_i3.Tenant?> getTenantBYPin({required int? pin}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTenantBYPin,
          [],
          {#pin: pin},
        ),
        returnValue: _i11.Future<_i3.Tenant?>.value(),
      ) as _i11.Future<_i3.Tenant?>);

  @override
  _i11.Future<_i3.Tenant?> getTenantBYUserId({required int? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTenantBYUserId,
          [],
          {#userId: userId},
        ),
        returnValue: _i11.Future<_i3.Tenant?>.value(),
      ) as _i11.Future<_i3.Tenant?>);

  @override
  _i11.Stream<List<_i3.Conversation>> getTop5RecentConversations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTop5RecentConversations,
          [],
        ),
        returnValue: _i11.Stream<List<_i3.Conversation>>.empty(),
      ) as _i11.Stream<List<_i3.Conversation>>);

  @override
  _i3.ITransaction? getTransactionById({required int? id}) =>
      (super.noSuchMethod(Invocation.method(
        #getTransactionById,
        [],
        {#id: id},
      )) as _i3.ITransaction?);

  @override
  _i11.Future<_i3.TransactionItem?> getTransactionItemById(
          {required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionItemById,
          [],
          {#id: id},
        ),
        returnValue: _i11.Future<_i3.TransactionItem?>.value(),
      ) as _i11.Future<_i3.TransactionItem?>);

  @override
  _i3.TransactionItem? getTransactionItemByVariantId({
    required int? variantId,
    int? transactionId,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getTransactionItemByVariantId,
        [],
        {
          #variantId: variantId,
          #transactionId: transactionId,
        },
      )) as _i3.TransactionItem?);

  @override
  _i11.Future<List<_i3.TransactionItem>> getTransactionItemsByTransactionId(
          {required int? transactionId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionItemsByTransactionId,
          [],
          {#transactionId: transactionId},
        ),
        returnValue: _i11.Future<List<_i3.TransactionItem>>.value(
            <_i3.TransactionItem>[]),
      ) as _i11.Future<List<_i3.TransactionItem>>);

  @override
  _i11.Stream<List<_i3.ITransaction>> transactionStreamById({
    required int? id,
    required _i13.FilterType? filterType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionStreamById,
          [],
          {
            #id: id,
            #filterType: filterType,
          },
        ),
        returnValue: _i11.Stream<List<_i3.ITransaction>>.empty(),
      ) as _i11.Stream<List<_i3.ITransaction>>);

  @override
  _i3.Variant? getVariantById({required int? id}) =>
      (super.noSuchMethod(Invocation.method(
        #getVariantById,
        [],
        {#id: id},
      )) as _i3.Variant?);

  @override
  _i11.Stream<List<_i3.Variant>> getVariantByProductIdStream(
          {int? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVariantByProductIdStream,
          [],
          {#productId: productId},
        ),
        returnValue: _i11.Stream<List<_i3.Variant>>.empty(),
      ) as _i11.Stream<List<_i3.Variant>>);

  @override
  bool isSubscribed({
    required String? feature,
    required int? businessId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isSubscribed,
          [],
          {
            #feature: feature,
            #businessId: businessId,
          },
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isTaxEnabled({required _i3.Business? business}) => (super.noSuchMethod(
        Invocation.method(
          #isTaxEnabled,
          [],
          {#business: business},
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<bool> isTokenValid({
    required String? tokenType,
    required int? businessId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isTokenValid,
          [],
          {
            #tokenType: tokenType,
            #businessId: businessId,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  int lifeTimeCustomersForbranch({required String? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #lifeTimeCustomersForbranch,
          [],
          {#branchId: branchId},
        ),
        returnValue: 0,
      ) as int);

  @override
  _i11.Future<void> loadConversations({
    required int? businessId,
    int? pageSize = 10,
    String? pk,
    String? sk,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadConversations,
          [],
          {
            #businessId: businessId,
            #pageSize: pageSize,
            #pk: pk,
            #sk: sk,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i3.ITransaction> manageCashInOutTransaction({
    required String? transactionType,
    required bool? isExpense,
    required int? branchId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #manageCashInOutTransaction,
          [],
          {
            #transactionType: transactionType,
            #isExpense: isExpense,
            #branchId: branchId,
          },
        ),
        returnValue: _i11.Future<_i3.ITransaction>.value(_FakeITransaction_1(
          this,
          Invocation.method(
            #manageCashInOutTransaction,
            [],
            {
              #transactionType: transactionType,
              #isExpense: isExpense,
              #branchId: branchId,
            },
          ),
        )),
      ) as _i11.Future<_i3.ITransaction>);

  @override
  _i11.Stream<_i3.ITransaction> manageTransactionStream({
    required String? transactionType,
    required bool? isExpense,
    required int? branchId,
    bool? includeSubTotalCheck = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #manageTransactionStream,
          [],
          {
            #transactionType: transactionType,
            #isExpense: isExpense,
            #branchId: branchId,
            #includeSubTotalCheck: includeSubTotalCheck,
          },
        ),
        returnValue: _i11.Stream<_i3.ITransaction>.empty(),
      ) as _i11.Stream<_i3.ITransaction>);

  @override
  _i3.ITransaction manageTransaction({
    required String? transactionType,
    required bool? isExpense,
    required int? branchId,
    bool? includeSubTotalCheck = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #manageTransaction,
          [],
          {
            #transactionType: transactionType,
            #isExpense: isExpense,
            #branchId: branchId,
            #includeSubTotalCheck: includeSubTotalCheck,
          },
        ),
        returnValue: _FakeITransaction_1(
          this,
          Invocation.method(
            #manageTransaction,
            [],
            {
              #transactionType: transactionType,
              #isExpense: isExpense,
              #branchId: branchId,
              #includeSubTotalCheck: includeSubTotalCheck,
            },
          ),
        ),
      ) as _i3.ITransaction);

  @override
  _i11.Stream<List<_i3.ITransaction>> orders({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #orders,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<List<_i3.ITransaction>>.empty(),
      ) as _i11.Stream<List<_i3.ITransaction>>);

  @override
  _i11.Future<void> patchSocialSetting({required _i3.Setting? setting}) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchSocialSetting,
          [],
          {#setting: setting},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  List<_i3.TransactionItem> transactionItems({
    required int? transactionId,
    required bool? doneWithTransaction,
    required int? branchId,
    required bool? active,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionItems,
          [],
          {
            #transactionId: transactionId,
            #doneWithTransaction: doneWithTransaction,
            #branchId: branchId,
            #active: active,
          },
        ),
        returnValue: <_i3.TransactionItem>[],
      ) as List<_i3.TransactionItem>);

  @override
  _i11.Stream<List<_i3.Product>> productStreams({int? prodIndex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #productStreams,
          [],
          {#prodIndex: prodIndex},
        ),
        returnValue: _i11.Stream<List<_i3.Product>>.empty(),
      ) as _i11.Stream<List<_i3.Product>>);

  @override
  _i11.Future<List<_i3.Product>> products({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #products,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.Product>>.value(<_i3.Product>[]),
      ) as _i11.Future<List<_i3.Product>>);

  @override
  _i11.Future<List<_i3.Product>> productsFuture({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #productsFuture,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.Product>>.value(<_i3.Product>[]),
      ) as _i11.Future<List<_i3.Product>>);

  @override
  _i11.Future<void> recordUserActivity({
    required int? userId,
    required String? activity,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordUserActivity,
          [],
          {
            #userId: userId,
            #activity: activity,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> refund({required int? itemId}) => (super.noSuchMethod(
        Invocation.method(
          #refund,
          [],
          {#itemId: itemId},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<int> registerOnSocial({
    String? phoneNumberOrEmail,
    String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerOnSocial,
          [],
          {
            #phoneNumberOrEmail: phoneNumberOrEmail,
            #password: password,
          },
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<dynamic> removeCustomerFromTransaction({
    required int? customerId,
    required int? transactionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeCustomerFromTransaction,
          [],
          {
            #customerId: customerId,
            #transactionId: transactionId,
          },
        ),
        returnValue: _i11.Future<dynamic>.value(),
      ) as _i11.Future<dynamic>);

  @override
  _i11.Future<void> saveDiscount({
    required int? branchId,
    required dynamic name,
    double? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDiscount,
          [],
          {
            #branchId: branchId,
            #name: name,
            #amount: amount,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i3.Conversation> sendMessage({
    required String? message,
    required _i3.Conversation? latestConversation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #message: message,
            #latestConversation: latestConversation,
          },
        ),
        returnValue: _i11.Future<_i3.Conversation>.value(_FakeConversation_2(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #message: message,
              #latestConversation: latestConversation,
            },
          ),
        )),
      ) as _i11.Future<_i3.Conversation>);

  @override
  _i11.Future<int> sendReport(
          {required List<_i3.TransactionItem>? transactionItems}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendReport,
          [],
          {#transactionItems: transactionItems},
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<void> sendScheduleMessages() => (super.noSuchMethod(
        Invocation.method(
          #sendScheduleMessages,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<int> size<T>({required T? object}) => (super.noSuchMethod(
        Invocation.method(
          #size,
          [],
          {#object: object},
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i3.Stock? stockByVariantId({
    required int? variantId,
    required int? branchId,
    bool? nonZeroValue = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #stockByVariantId,
        [],
        {
          #variantId: variantId,
          #branchId: branchId,
          #nonZeroValue: nonZeroValue,
        },
      )) as _i3.Stock?);

  @override
  _i11.Future<_i3.Stock?> stockByVariantIdFuture({
    required int? variantId,
    bool? nonZeroValue = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stockByVariantIdFuture,
          [],
          {
            #variantId: variantId,
            #nonZeroValue: nonZeroValue,
          },
        ),
        returnValue: _i11.Future<_i3.Stock?>.value(),
      ) as _i11.Future<_i3.Stock?>);

  @override
  _i11.Future<double> stocks({
    int? productId,
    int? variantId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stocks,
          [],
          {
            #productId: productId,
            #variantId: variantId,
          },
        ),
        returnValue: _i11.Future<double>.value(0.0),
      ) as _i11.Future<double>);

  @override
  _i11.Future<List<_i3.Tenant>> tenants({
    int? businessId,
    int? excludeUserId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #tenants,
          [],
          {
            #businessId: businessId,
            #excludeUserId: excludeUserId,
          },
        ),
        returnValue: _i11.Future<List<_i3.Tenant>>.value(<_i3.Tenant>[]),
      ) as _i11.Future<List<_i3.Tenant>>);

  @override
  _i11.Future<List<_i3.ITransaction>> tickets() => (super.noSuchMethod(
        Invocation.method(
          #tickets,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.ITransaction>>.value(<_i3.ITransaction>[]),
      ) as _i11.Future<List<_i3.ITransaction>>);

  @override
  _i11.Stream<List<_i3.ITransaction>> ticketsStreams() => (super.noSuchMethod(
        Invocation.method(
          #ticketsStreams,
          [],
        ),
        returnValue: _i11.Stream<List<_i3.ITransaction>>.empty(),
      ) as _i11.Stream<List<_i3.ITransaction>>);

  @override
  _i11.Future<List<_i3.TransactionItem>> transactionItemsFuture({
    required int? transactionId,
    required bool? doneWithTransaction,
    required bool? active,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionItemsFuture,
          [],
          {
            #transactionId: transactionId,
            #doneWithTransaction: doneWithTransaction,
            #active: active,
          },
        ),
        returnValue: _i11.Future<List<_i3.TransactionItem>>.value(
            <_i3.TransactionItem>[]),
      ) as _i11.Future<List<_i3.TransactionItem>>);

  @override
  _i11.Stream<List<_i3.ITransaction>> transactionList({
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionList,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i11.Stream<List<_i3.ITransaction>>.empty(),
      ) as _i11.Stream<List<_i3.ITransaction>>);

  @override
  _i11.Stream<List<_i3.TransactionItem>> transactionItemList({
    DateTime? startDate,
    DateTime? endDate,
    bool? isPluReport,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionItemList,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
            #isPluReport: isPluReport,
          },
        ),
        returnValue: _i11.Stream<List<_i3.TransactionItem>>.empty(),
      ) as _i11.Stream<List<_i3.TransactionItem>>);

  @override
  _i11.Stream<List<_i3.ITransaction>> transactionsStream({
    String? status,
    String? transactionType,
    int? branchId,
    bool? isCashOut = false,
    bool? includePending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionsStream,
          [],
          {
            #status: status,
            #transactionType: transactionType,
            #branchId: branchId,
            #isCashOut: isCashOut,
            #includePending: includePending,
          },
        ),
        returnValue: _i11.Stream<List<_i3.ITransaction>>.empty(),
      ) as _i11.Stream<List<_i3.ITransaction>>);

  @override
  List<_i3.ITransaction> transactions({
    DateTime? startDate,
    DateTime? endDate,
    String? status,
    String? transactionType,
    int? branchId,
    bool? isExpense = false,
    bool? includePending = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactions,
          [],
          {
            #startDate: startDate,
            #endDate: endDate,
            #status: status,
            #transactionType: transactionType,
            #branchId: branchId,
            #isExpense: isExpense,
            #includePending: includePending,
          },
        ),
        returnValue: <_i3.ITransaction>[],
      ) as List<_i3.ITransaction>);

  @override
  _i11.Future<List<_i3.IUnit>> units({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #units,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Future<List<_i3.IUnit>>.value(<_i3.IUnit>[]),
      ) as _i11.Future<List<_i3.IUnit>>);

  @override
  _i11.Future<List<_i3.Device>> unpublishedDevices(
          {required int? businessId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #unpublishedDevices,
          [],
          {#businessId: businessId},
        ),
        returnValue: _i11.Future<List<_i3.Device>>.value(<_i3.Device>[]),
      ) as _i11.Future<List<_i3.Device>>);

  @override
  _i11.Future<int> updateNonRealm<T>({
    required T? data,
    required _i12.HttpClientInterface? flipperHttpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNonRealm,
          [],
          {
            #data: data,
            #flipperHttpClient: flipperHttpClient,
          },
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  _i11.Future<bool> updateContact({
    required Map<String, dynamic>? contact,
    required int? businessId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateContact,
          [],
          {
            #contact: contact,
            #businessId: businessId,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<int> userNameAvailable({
    required String? name,
    required _i12.HttpClientInterface? flipperHttpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userNameAvailable,
          [],
          {
            #name: name,
            #flipperHttpClient: flipperHttpClient,
          },
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  List<_i3.Variant> variants({
    required int? branchId,
    int? productId,
    int? page,
    int? itemsPerPage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #variants,
          [],
          {
            #branchId: branchId,
            #productId: productId,
            #page: page,
            #itemsPerPage: itemsPerPage,
          },
        ),
        returnValue: <_i3.Variant>[],
      ) as List<_i3.Variant>);

  @override
  _i11.Future<String> dbPath({
    required String? path,
    int? folder,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dbPath,
          [],
          {
            #path: path,
            #folder: folder,
          },
        ),
        returnValue: _i11.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #dbPath,
            [],
            {
              #path: path,
              #folder: folder,
            },
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i4.RealmApiInterface instance() => (super.noSuchMethod(
        Invocation.method(
          #instance,
          [],
        ),
        returnValue: _FakeRealmApiInterface_3(
          this,
          Invocation.method(
            #instance,
            [],
          ),
        ),
      ) as _i4.RealmApiInterface);

  @override
  _i11.Future<_i4.RealmApiInterface> configure({
    required bool? useInMemoryDb,
    bool? useFallBack = false,
    String? encryptionKey,
    int? businessId,
    _i9.Realm? localRealm,
    int? branchId,
    int? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {
            #useInMemoryDb: useInMemoryDb,
            #useFallBack: useFallBack,
            #encryptionKey: encryptionKey,
            #businessId: businessId,
            #localRealm: localRealm,
            #branchId: branchId,
            #userId: userId,
          },
        ),
        returnValue:
            _i11.Future<_i4.RealmApiInterface>.value(_FakeRealmApiInterface_3(
          this,
          Invocation.method(
            #configure,
            [],
            {
              #useInMemoryDb: useInMemoryDb,
              #useFallBack: useFallBack,
              #encryptionKey: encryptionKey,
              #businessId: businessId,
              #localRealm: localRealm,
              #branchId: branchId,
              #userId: userId,
            },
          ),
        )),
      ) as _i11.Future<_i4.RealmApiInterface>);

  @override
  _i11.Future<int> addVariant({
    required List<_i3.Variant>? variations,
    required int? branchId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addVariant,
          [],
          {
            #variations: variations,
            #branchId: branchId,
          },
        ),
        returnValue: _i11.Future<int>.value(0),
      ) as _i11.Future<int>);

  @override
  void createVariant({
    required String? barCode,
    required String? sku,
    required int? productId,
    required double? retailPrice,
    required double? supplierPrice,
    required String? color,
    required double? qty,
    required int? branchId,
    required int? itemSeq,
    required int? tinNumber,
    required String? name,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createVariant,
          [],
          {
            #barCode: barCode,
            #sku: sku,
            #productId: productId,
            #retailPrice: retailPrice,
            #supplierPrice: supplierPrice,
            #color: color,
            #qty: qty,
            #branchId: branchId,
            #itemSeq: itemSeq,
            #tinNumber: tinNumber,
            #name: name,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<_i14.SocialToken?> loginOnSocial({
    String? phoneNumberOrEmail,
    String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginOnSocial,
          [],
          {
            #phoneNumberOrEmail: phoneNumberOrEmail,
            #password: password,
          },
        ),
        returnValue: _i11.Future<_i14.SocialToken?>.value(),
      ) as _i11.Future<_i14.SocialToken?>);

  @override
  _i11.Future<_i3.LPermission?> permission({required int? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #permission,
          [],
          {#userId: userId},
        ),
        returnValue: _i11.Future<_i3.LPermission?>.value(),
      ) as _i11.Future<_i3.LPermission?>);

  @override
  bool isEmail(String? input) => (super.noSuchMethod(
        Invocation.method(
          #isEmail,
          [input],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<List<_i14.BusinessType>> businessTypes() => (super.noSuchMethod(
        Invocation.method(
          #businessTypes,
          [],
        ),
        returnValue:
            _i11.Future<List<_i14.BusinessType>>.value(<_i14.BusinessType>[]),
      ) as _i11.Future<List<_i14.BusinessType>>);

  @override
  _i11.Future<_i14.IPin?> getPin({
    required String? pin,
    required _i12.HttpClientInterface? flipperHttpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPin,
          [],
          {
            #pin: pin,
            #flipperHttpClient: flipperHttpClient,
          },
        ),
        returnValue: _i11.Future<_i14.IPin?>.value(),
      ) as _i11.Future<_i14.IPin?>);

  @override
  bool isRealmClosed() => (super.noSuchMethod(
        Invocation.method(
          #isRealmClosed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i11.Stream<List<_i3.TransactionItem>> transactionItemsStreams({
    required int? transactionId,
    required bool? doneWithTransaction,
    required bool? active,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transactionItemsStreams,
          [],
          {
            #transactionId: transactionId,
            #doneWithTransaction: doneWithTransaction,
            #active: active,
          },
        ),
        returnValue: _i11.Stream<List<_i3.TransactionItem>>.empty(),
      ) as _i11.Stream<List<_i3.TransactionItem>>);

  @override
  _i11.Stream<double> soldStockValue({required dynamic branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #soldStockValue,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<double>.empty(),
      ) as _i11.Stream<double>);

  @override
  _i11.Stream<double> stockValue({required dynamic branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #stockValue,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<double>.empty(),
      ) as _i11.Stream<double>);

  @override
  void handleCompensatingWrite(
          _i9.CompensatingWriteError? compensatingWriteError) =>
      super.noSuchMethod(
        Invocation.method(
          #handleCompensatingWrite,
          [compensatingWriteError],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> markModelForEbmUpdate<T>({
    required T? model,
    bool? updated = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #markModelForEbmUpdate,
          [],
          {
            #model: model,
            #updated: updated,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Stream<List<_i3.Category>> categoryStream() => (super.noSuchMethod(
        Invocation.method(
          #categoryStream,
          [],
        ),
        returnValue: _i11.Stream<List<_i3.Category>>.empty(),
      ) as _i11.Stream<List<_i3.Category>>);

  @override
  _i3.Configurations getByTaxType({required String? taxtype}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByTaxType,
          [],
          {#taxtype: taxtype},
        ),
        returnValue: _FakeConfigurations_4(
          this,
          Invocation.method(
            #getByTaxType,
            [],
            {#taxtype: taxtype},
          ),
        ),
      ) as _i3.Configurations);

  @override
  _i11.Future<_i5.RwApiResponse> selectImportItems({
    required int? tin,
    required String? bhfId,
    required String? lastReqDt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectImportItems,
          [],
          {
            #tin: tin,
            #bhfId: bhfId,
            #lastReqDt: lastReqDt,
          },
        ),
        returnValue: _i11.Future<_i5.RwApiResponse>.value(_FakeRwApiResponse_5(
          this,
          Invocation.method(
            #selectImportItems,
            [],
            {
              #tin: tin,
              #bhfId: bhfId,
              #lastReqDt: lastReqDt,
            },
          ),
        )),
      ) as _i11.Future<_i5.RwApiResponse>);

  @override
  _i11.Future<void> syncUserWithAwsIncognito({required String? identifier}) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncUserWithAwsIncognito,
          [],
          {#identifier: identifier},
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<_i11.Stream<double>> downloadAssetSave({
    String? assetName,
    String? subPath = r'branch',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadAssetSave,
          [],
          {
            #assetName: assetName,
            #subPath: subPath,
          },
        ),
        returnValue:
            _i11.Future<_i11.Stream<double>>.value(_i11.Stream<double>.empty()),
      ) as _i11.Future<_i11.Stream<double>>);

  @override
  _i11.Future<bool> removeS3File({required String? fileName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeS3File,
          [],
          {#fileName: fileName},
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> amplifyLogout() => (super.noSuchMethod(
        Invocation.method(
          #amplifyLogout,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  List<_i3.Product> getProducts({String? key}) => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
          {#key: key},
        ),
        returnValue: <_i3.Product>[],
      ) as List<_i3.Product>);

  @override
  List<_i3.Variant> getVariants({String? key}) => (super.noSuchMethod(
        Invocation.method(
          #getVariants,
          [],
          {#key: key},
        ),
        returnValue: <_i3.Variant>[],
      ) as List<_i3.Variant>);

  @override
  void saveComposite({required _i3.Composite? composite}) => super.noSuchMethod(
        Invocation.method(
          #saveComposite,
          [],
          {#composite: composite},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Stream<_i3.SKU?> sku({
    required int? branchId,
    required int? businessId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sku,
          [],
          {
            #branchId: branchId,
            #businessId: businessId,
          },
        ),
        returnValue: _i11.Stream<_i3.SKU?>.empty(),
      ) as _i11.Stream<_i3.SKU?>);

  @override
  _i11.Future<_i3.Product?> createProduct({
    required _i3.Product? product,
    required int? businessId,
    required int? branchId,
    required int? tinNumber,
    required String? bhFId,
    bool? skipRegularVariant = false,
    double? qty = 1.0,
    double? supplyPrice = 0.0,
    double? retailPrice = 0.0,
    int? itemSeq = 1,
    bool? ebmSynced = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProduct,
          [],
          {
            #product: product,
            #businessId: businessId,
            #branchId: branchId,
            #tinNumber: tinNumber,
            #bhFId: bhFId,
            #skipRegularVariant: skipRegularVariant,
            #qty: qty,
            #supplyPrice: supplyPrice,
            #retailPrice: retailPrice,
            #itemSeq: itemSeq,
            #ebmSynced: ebmSynced,
          },
        ),
        returnValue: _i11.Future<_i3.Product?>.value(),
      ) as _i11.Future<_i3.Product?>);

  @override
  List<_i3.Composite> composites({required int? productId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #composites,
          [],
          {#productId: productId},
        ),
        returnValue: <_i3.Composite>[],
      ) as List<_i3.Composite>);

  @override
  _i3.Composite composite({required int? variantId}) => (super.noSuchMethod(
        Invocation.method(
          #composite,
          [],
          {#variantId: variantId},
        ),
        returnValue: _FakeComposite_6(
          this,
          Invocation.method(
            #composite,
            [],
            {#variantId: variantId},
          ),
        ),
      ) as _i3.Composite);

  @override
  _i11.Future<String> uploadPdfToS3(
    _i15.Uint8List? pdfData,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadPdfToS3,
          [
            pdfData,
            fileName,
          ],
        ),
        returnValue: _i11.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #uploadPdfToS3,
            [
              pdfData,
              fileName,
            ],
          ),
        )),
      ) as _i11.Future<String>);

  @override
  List<_i3.Composite> compositesByVariantId({required int? variantId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #compositesByVariantId,
          [],
          {#variantId: variantId},
        ),
        returnValue: <_i3.Composite>[],
      ) as List<_i3.Composite>);

  @override
  _i11.Stream<List<_i3.Report>> reports({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #reports,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<List<_i3.Report>>.empty(),
      ) as _i11.Stream<List<_i3.Report>>);

  @override
  _i3.Report report({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #report,
          [],
          {#id: id},
        ),
        returnValue: _FakeReport_7(
          this,
          Invocation.method(
            #report,
            [],
            {#id: id},
          ),
        ),
      ) as _i3.Report);

  @override
  _i11.Future<({double grossProfit, double netProfit})> getReportData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getReportData,
          [],
        ),
        returnValue:
            _i11.Future<({double grossProfit, double netProfit})>.value(
                (grossProfit: 0.0, netProfit: 0.0)),
      ) as _i11.Future<({double grossProfit, double netProfit})>);

  @override
  bool isAdmin({
    required int? userId,
    required String? appFeature,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isAdmin,
          [],
          {
            #userId: userId,
            #appFeature: appFeature,
          },
        ),
        returnValue: false,
      ) as bool);

  @override
  List<_i3.Access> access({required int? userId}) => (super.noSuchMethod(
        Invocation.method(
          #access,
          [],
          {#userId: userId},
        ),
        returnValue: <_i3.Access>[],
      ) as List<_i3.Access>);

  @override
  List<_i3.LPermission> permissions({required int? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #permissions,
          [],
          {#userId: userId},
        ),
        returnValue: <_i3.LPermission>[],
      ) as List<_i3.LPermission>);

  @override
  _i11.Stream<List<_i3.StockRequest>> requestsStream(
          {required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestsStream,
          [],
          {#branchId: branchId},
        ),
        returnValue: _i11.Stream<List<_i3.StockRequest>>.empty(),
      ) as _i11.Stream<List<_i3.StockRequest>>);

  @override
  _i3.Tenant getTenant({required int? userId}) => (super.noSuchMethod(
        Invocation.method(
          #getTenant,
          [],
          {#userId: userId},
        ),
        returnValue: _FakeTenant_8(
          this,
          Invocation.method(
            #getTenant,
            [],
            {#userId: userId},
          ),
        ),
      ) as _i3.Tenant);

  @override
  List<_i3.StockRequest> requests({required int? branchId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requests,
          [],
          {#branchId: branchId},
        ),
        returnValue: <_i3.StockRequest>[],
      ) as List<_i3.StockRequest>);

  @override
  _i11.Future<_i6.PayStackCustomer> getPayStackCustomer(
    String? customerCodeOrEmail,
    _i12.HttpClientInterface? flipperHttpClient, {
    required _i3.Business? business,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPayStackCustomer,
          [
            customerCodeOrEmail,
            flipperHttpClient,
          ],
          {#business: business},
        ),
        returnValue:
            _i11.Future<_i6.PayStackCustomer>.value(_FakePayStackCustomer_9(
          this,
          Invocation.method(
            #getPayStackCustomer,
            [
              customerCodeOrEmail,
              flipperHttpClient,
            ],
            {#business: business},
          ),
        )),
      ) as _i11.Future<_i6.PayStackCustomer>);

  @override
  String getDueDate() => (super.noSuchMethod(
        Invocation.method(
          #getDueDate,
          [],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #getDueDate,
            [],
          ),
        ),
      ) as String);

  @override
  _i11.Future<({String customerCode, String url, int userId})> subscribe({
    required int? businessId,
    required int? agentCode,
    required _i3.Business? business,
    required _i12.HttpClientInterface? flipperHttpClient,
    required int? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
          {
            #businessId: businessId,
            #agentCode: agentCode,
            #business: business,
            #flipperHttpClient: flipperHttpClient,
            #amount: amount,
          },
        ),
        returnValue:
            _i11.Future<({String customerCode, String url, int userId})>.value((
          customerCode: _i10.dummyValue<String>(
            this,
            Invocation.method(
              #subscribe,
              [],
              {
                #businessId: businessId,
                #agentCode: agentCode,
                #business: business,
                #flipperHttpClient: flipperHttpClient,
                #amount: amount,
              },
            ),
          ),
          url: _i10.dummyValue<String>(
            this,
            Invocation.method(
              #subscribe,
              [],
              {
                #businessId: businessId,
                #agentCode: agentCode,
                #business: business,
                #flipperHttpClient: flipperHttpClient,
                #amount: amount,
              },
            ),
          ),
          userId: 0
        )),
      ) as _i11.Future<({String customerCode, String url, int userId})>);

  @override
  _i11.Future<bool> hasActiveSubscription({
    required int? businessId,
    required _i12.HttpClientInterface? flipperHttpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasActiveSubscription,
          [],
          {
            #businessId: businessId,
            #flipperHttpClient: flipperHttpClient,
          },
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i3.PaymentPlan> saveOrUpdatePaymentPlan({
    required int? businessId,
    required String? selectedPlan,
    required int? additionalDevices,
    required bool? isYearlyPlan,
    required double? totalPrice,
    String? customerCode,
    required String? paymentMethod,
    required int? payStackUserId,
    required _i12.HttpClientInterface? flipperHttpClient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveOrUpdatePaymentPlan,
          [],
          {
            #businessId: businessId,
            #selectedPlan: selectedPlan,
            #additionalDevices: additionalDevices,
            #isYearlyPlan: isYearlyPlan,
            #totalPrice: totalPrice,
            #customerCode: customerCode,
            #paymentMethod: paymentMethod,
            #payStackUserId: payStackUserId,
            #flipperHttpClient: flipperHttpClient,
          },
        ),
        returnValue: _i11.Future<_i3.PaymentPlan>.value(_FakePaymentPlan_10(
          this,
          Invocation.method(
            #saveOrUpdatePaymentPlan,
            [],
            {
              #businessId: businessId,
              #selectedPlan: selectedPlan,
              #additionalDevices: additionalDevices,
              #isYearlyPlan: isYearlyPlan,
              #totalPrice: totalPrice,
              #customerCode: customerCode,
              #paymentMethod: paymentMethod,
              #payStackUserId: payStackUserId,
              #flipperHttpClient: flipperHttpClient,
            },
          ),
        )),
      ) as _i11.Future<_i3.PaymentPlan>);

  @override
  _i3.PaymentPlan? getPaymentPlan({required int? businessId}) =>
      (super.noSuchMethod(Invocation.method(
        #getPaymentPlan,
        [],
        {#businessId: businessId},
      )) as _i3.PaymentPlan?);

  @override
  _i11.Stream<_i3.PaymentPlan?> paymentPlanStream({required int? businessId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #paymentPlanStream,
          [],
          {#businessId: businessId},
        ),
        returnValue: _i11.Stream<_i3.PaymentPlan?>.empty(),
      ) as _i11.Stream<_i3.PaymentPlan?>);

  @override
  _i11.Future<void> updateSubscription({
    int? branchId,
    int? businessId,
    int? userId,
    _i9.Realm? realm,
    _i9.Realm? localRealm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSubscription,
          [],
          {
            #branchId: branchId,
            #businessId: businessId,
            #userId: userId,
            #realm: realm,
            #localRealm: localRealm,
          },
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}
